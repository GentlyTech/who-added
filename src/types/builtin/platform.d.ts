declare namespace Spicetify {
  interface Platform {
    ReduxStore: {
      cleanActions: Function;
      triggerActions: Function;
      storeAction: Function;
    };
    version: string;
    container: string;
    operatingSystem: string;
    isDeveloperMode: boolean;
    isVideoSupported: boolean;
    isWebPSupported: boolean;
    enableCastConnect: boolean;
    initialUser: {
      type: string;
      uri: string;
      username: string;
      displayName: string;
      avatarBackgroundColor: number;
      images: any;
    };
    initialProductState: any;
    username: string;
    ServiceWorkerMessenger: {
      then: Function;
      catch: Function;
      finally: Function;
    };
    Registry: {
      registerValue: Function;
      registerFactory: Function;
      registerImpl: Function;
      resolve: Function;
      resolveNoThrow: Function;
      resolveImpl: Function;
      wrap: Function;
      wrapImpl: Function;
      getDependencyTree: Function;
    };
    Session: {
      accessToken: string;
      accessTokenExpirationTimestampMs: number;
      isAnonymous: boolean;
      market: string;
      locale: string;
      valid: boolean;
    };
    Transport: {
      authenticate: Function;
      isConnected: Function;
      isAuthenticated: Function;
      isReconnecting: Function;
      isOnline: Function;
      connect: Function;
      disconnect: Function;
      forceDisconnect: Function;
      forceTokenRefresh: Function;
      getInitTime: Function;
      getEndpoints: Function;
      getLastToken: Function;
      toPublic: Function;
      hasOwnerRef: Function;
      appendTokenQuery: Function;
      appendLastTokenQuery: Function;
      matchMessages: Function;
      unmatchMessages: Function;
      handlePushRequests: Function;
      unhandlePushRequests: Function;
      request: Function;
      addPlugin: Function;
      removePlugin: Function;
      hasPlugin: Function;
      getPluginAPI: Function;
      getConnectionId: Function;
      removeAllListeners: Function;
      createEvent: Function;
      on: Function;
      addListener: Function;
      addListeners: Function;
      once: Function;
      removeListener: Function;
      removeListeners: Function;
      emit: Function;
      emitSync: Function;
      emitEvent: Function;
      emitEventSync: Function;
      emitAndWait: Function;
      emitEventAndWait: Function;
      proxyEmit: Function;
      proxyEmitSync: Function;
      proxyEmitAll: Function;
      proxyEmitAllSync: Function;
      onAddListener: Function;
      onRemoveListener: Function;
    };
    EventSender: {
      instanceContexts: {
        context_application_desktop: {
          version_code: number;
          version_string: string;
        };
        context_client_id: {
          value: string;
        };
        context_installation_id: {
          value: string;
        };
        context_device_desktop: {
          device_id: string;
          device_manufacturer: string;
          device_model: string;
          os_version: string;
          platform_type: string;
        };
      };
      uploadingInProgress: boolean;
      transport: {
        authenticate: Function;
        isConnected: Function;
        isAuthenticated: Function;
        isReconnecting: Function;
        isOnline: Function;
        connect: Function;
        disconnect: Function;
        forceDisconnect: Function;
        forceTokenRefresh: Function;
        getInitTime: Function;
        getEndpoints: Function;
        getLastToken: Function;
        toPublic: Function;
        hasOwnerRef: Function;
        appendTokenQuery: Function;
        appendLastTokenQuery: Function;
        matchMessages: Function;
        unmatchMessages: Function;
        handlePushRequests: Function;
        unhandlePushRequests: Function;
        request: Function;
        addPlugin: Function;
        removePlugin: Function;
        hasPlugin: Function;
        getPluginAPI: Function;
        getConnectionId: Function;
        removeAllListeners: Function;
        createEvent: Function;
        on: Function;
        addListener: Function;
        addListeners: Function;
        once: Function;
        removeListener: Function;
        removeListeners: Function;
        emit: Function;
        emitSync: Function;
        emitEvent: Function;
        emitEventSync: Function;
        emitAndWait: Function;
        emitEventAndWait: Function;
        proxyEmit: Function;
        proxyEmitSync: Function;
        proxyEmitAll: Function;
        proxyEmitAllSync: Function;
        onAddListener: Function;
        onRemoveListener: Function;
      };
      ownerProvider: Function;
      uploaders: {
        authorized: {
          upload: Function;
          lastUpload: Function;
          shouldBackoff: Function;
          createEvent: Function;
          on: Function;
          addListener: Function;
          addListeners: Function;
          once: Function;
          removeListener: Function;
          removeListeners: Function;
          removeAllListeners: Function;
          emit: Function;
          emitSync: Function;
          emitEvent: Function;
          emitEventSync: Function;
          emitAndWait: Function;
          emitEventAndWait: Function;
          proxyEmit: Function;
          proxyEmitSync: Function;
          proxyEmitAll: Function;
          proxyEmitAllSync: Function;
          onAddListener: Function;
          onRemoveListener: Function;
        };
        unauthorized: {
          upload: Function;
          lastUpload: Function;
          shouldBackoff: Function;
          createEvent: Function;
          on: Function;
          addListener: Function;
          addListeners: Function;
          once: Function;
          removeListener: Function;
          removeListeners: Function;
          removeAllListeners: Function;
          emit: Function;
          emitSync: Function;
          emitEvent: Function;
          emitEventSync: Function;
          emitAndWait: Function;
          emitEventAndWait: Function;
          proxyEmit: Function;
          proxyEmitSync: Function;
          proxyEmitAll: Function;
          proxyEmitAllSync: Function;
          onAddListener: Function;
          onRemoveListener: Function;
        };
      };
      useOptimizedESS2NA: boolean;
      sendESStats: Function;
      flush: Function;
      storageManager: {
        currentTotalSizeForEvents: number;
        currentTotalSizeForDroppedCounters: number;
        maxStorageCapacityForEventsInBytes: number;
        maxStorageCapacityForDroppedCountersInBytes: number;
        storageKeyPrefix: string;
        storage: {
          maxCapacityInBytes: number;
          adapter: {
            setItem: Function;
            getItem: Function;
            removeItem: Function;
            clear: Function;
            getKeys: Function;
          };
          flushStrategy: {
            kind: string;
            interval: number;
          };
          maxCapacityForDroppedInPercentage: number;
        };
        configureMaxStorageCapacity: Function;
        setTotalEventStorageSizeAtStartup: Function;
        setTotalDroppedCountersStorageSizeAtStartup: Function;
        createStorage: Function;
        getItemSizeInBytes: Function;
        canMakeEventsStorageFull: Function;
        canMakeDroppedCountersStorageFull: Function;
        getOrCreateId: Function;
        updateItemInEventsStorage: Function;
        updateItemInDroppedCountersStorage: Function;
        addItemInEventsStorage: Function;
        addItemInDroppedCountersStorage: Function;
        setItem: Function;
        getItem: Function;
        removeItemInEventsStorage: Function;
        removeItemInDroppedCountersStorage: Function;
        getKeys: Function;
        clear: Function;
        setCounterItem: Function;
      };
      droppedEventsTracker: {
        storageManager: {
          currentTotalSizeForEvents: number;
          currentTotalSizeForDroppedCounters: number;
          maxStorageCapacityForEventsInBytes: number;
          maxStorageCapacityForDroppedCountersInBytes: number;
          storageKeyPrefix: string;
          storage: {
            maxCapacityInBytes: number;
            adapter: {
              setItem: Function;
              getItem: Function;
              removeItem: Function;
              clear: Function;
              getKeys: Function;
            };
            flushStrategy: {
              kind: string;
              interval: number;
            };
            maxCapacityForDroppedInPercentage: number;
          };
          configureMaxStorageCapacity: Function;
          setTotalEventStorageSizeAtStartup: Function;
          setTotalDroppedCountersStorageSizeAtStartup: Function;
          createStorage: Function;
          getItemSizeInBytes: Function;
          canMakeEventsStorageFull: Function;
          canMakeDroppedCountersStorageFull: Function;
          getOrCreateId: Function;
          updateItemInEventsStorage: Function;
          updateItemInDroppedCountersStorage: Function;
          addItemInEventsStorage: Function;
          addItemInDroppedCountersStorage: Function;
          setItem: Function;
          getItem: Function;
          removeItemInEventsStorage: Function;
          removeItemInDroppedCountersStorage: Function;
          getKeys: Function;
          clear: Function;
          setCounterItem: Function;
        };
        updateDroppedEventCount: Function;
        getDroppedEventCounters: Function;
        getDroppedEventsCountersPerSequenceId: Function;
        updateReportedEventCounters: Function;
      };
      eventsManager: {
        storageManager: {
          currentTotalSizeForEvents: number;
          currentTotalSizeForDroppedCounters: number;
          maxStorageCapacityForEventsInBytes: number;
          maxStorageCapacityForDroppedCountersInBytes: number;
          storageKeyPrefix: string;
          storage: {
            maxCapacityInBytes: number;
            adapter: {
              setItem: Function;
              getItem: Function;
              removeItem: Function;
              clear: Function;
              getKeys: Function;
            };
            flushStrategy: {
              kind: string;
              interval: number;
            };
            maxCapacityForDroppedInPercentage: number;
          };
          configureMaxStorageCapacity: Function;
          setTotalEventStorageSizeAtStartup: Function;
          setTotalDroppedCountersStorageSizeAtStartup: Function;
          createStorage: Function;
          getItemSizeInBytes: Function;
          canMakeEventsStorageFull: Function;
          canMakeDroppedCountersStorageFull: Function;
          getOrCreateId: Function;
          updateItemInEventsStorage: Function;
          updateItemInDroppedCountersStorage: Function;
          addItemInEventsStorage: Function;
          addItemInDroppedCountersStorage: Function;
          setItem: Function;
          getItem: Function;
          removeItemInEventsStorage: Function;
          removeItemInDroppedCountersStorage: Function;
          getKeys: Function;
          clear: Function;
          setCounterItem: Function;
        };
        getEvent: Function;
        getEventKey: Function;
        getGlobalSequenceNumberFromEventKey: Function;
        addEvent: Function;
        getEventsKeys: Function;
        getEvents: Function;
        getEventsKeysPerSequenceId: Function;
        removeEvents: Function;
      };
      installationId: string;
      sequenceIdProvider: {
        installationId: string;
        getIdHash: Function;
        getId: Function;
      };
      sequenceNumberProvider: {
        storageManager: {
          currentTotalSizeForEvents: number;
          currentTotalSizeForDroppedCounters: number;
          maxStorageCapacityForEventsInBytes: number;
          maxStorageCapacityForDroppedCountersInBytes: number;
          storageKeyPrefix: string;
          storage: {
            maxCapacityInBytes: number;
            adapter: {
              setItem: Function;
              getItem: Function;
              removeItem: Function;
              clear: Function;
              getKeys: Function;
            };
            flushStrategy: {
              kind: string;
              interval: number;
            };
            maxCapacityForDroppedInPercentage: number;
          };
          configureMaxStorageCapacity: Function;
          setTotalEventStorageSizeAtStartup: Function;
          setTotalDroppedCountersStorageSizeAtStartup: Function;
          createStorage: Function;
          getItemSizeInBytes: Function;
          canMakeEventsStorageFull: Function;
          canMakeDroppedCountersStorageFull: Function;
          getOrCreateId: Function;
          updateItemInEventsStorage: Function;
          updateItemInDroppedCountersStorage: Function;
          addItemInEventsStorage: Function;
          addItemInDroppedCountersStorage: Function;
          setItem: Function;
          getItem: Function;
          removeItemInEventsStorage: Function;
          removeItemInDroppedCountersStorage: Function;
          getKeys: Function;
          clear: Function;
          setCounterItem: Function;
        };
        commitSequenceNumber: Function;
        getNextSequenceNumber: Function;
        generateNextSequenceNumber: Function;
        generateNextEventSequenceNumber: Function;
        generateNextGlobalSequenceNumber: Function;
        getEventsSequenceNumbers: Function;
        getSequenceNumbersPerSequenceId: Function;
      };
      statsProvider: {
        getInitialESSData: Function;
        addEventsToESSData: Function;
        addLossStatsData: Function;
        addDroppedEventsCountersData: Function;
        addDroppedEventsCounters: Function;
        provideEventSenderStats: Function;
      };
      initSendingEvents: Function;
      initializeContexts: Function;
      buildEvent: Function;
      getSpecificContext: Function;
      setupInstallationId: Function;
      getStorageId: Function;
      onBeforeDisconnect: Function;
      lastFlush: Function;
      sendEvents: Function;
      sendESS2NAWithOptimization: Function;
      commitAndUploadESStats: Function;
      onSuccessfullySentESStats: Function;
      sendToGabito: Function;
      getEvents: Function;
      storeEvent: Function;
      validateEventData: Function;
      send: Function;
      hasContext: Function;
      destroy: Function;
      getStorageType: Function;
      isUsingESS2NAOptimization: Function;
      getVersion: Function;
      finalFlush: Function;
      createEvent: Function;
      on: Function;
      addListener: Function;
      addListeners: Function;
      once: Function;
      removeListener: Function;
      removeListeners: Function;
      removeAllListeners: Function;
      emit: Function;
      emitSync: Function;
      emitEvent: Function;
      emitEventSync: Function;
      emitAndWait: Function;
      emitEventAndWait: Function;
      proxyEmit: Function;
      proxyEmitSync: Function;
      proxyEmitAll: Function;
      proxyEmitAllSync: Function;
      onAddListener: Function;
      onRemoveListener: Function;
    };
    Translations: any;
    FeatureFlags: {
      enableShows: boolean;
    };
    History: {
      action: string;
      location: {
        pathname: string;
        search: string;
        hash: string;
        state: {
          navigationalRoot: string;
        };
        key: string;
      };
      index: number;
      createHref: Function;
      replace: Function;
      go: Function;
      goBack: Function;
      goForward: Function;
      canGo: Function;
      block: Function;
      listen: Function;
    };
    AdManagers: {
      config: {
        getAdsSlotConfig: Function;
      };
      audio: {
        enabled: boolean;
        subscription: any;
        onAdMessage: Function;
        audioApi: {
          postEvent: Function;
        };
        getContextAdInfo: Function;
        inStreamApi: {
          enabled: boolean;
          inStreamAdsSubscription: any;
          inStreamAd: any;
          onAdMessageCallbacks: any;
          adsCoreConnector: {
            createSlot: Function;
            clearSlot: Function;
            enableSlot: Function;
            getAds: Function;
            fetchSlot: Function;
            getPreviewAd: Function;
            getSlotSettings: Function;
            getSlot: Function;
            increaseStreamTime: Function;
            insertStreamAd: Function;
            overrideCountry: Function;
            putState: Function;
            putTargeting: Function;
            subscribeToProductState: Function;
            subscribeToInStreamAds: Function;
            subscribeToSlot: Function;
            triggerSlot: Function;
            skipToNextWithOverride: Function;
            setRequestHeader: Function;
            removeRequestHeader: Function;
            updateAdServerEndpoint: Function;
            updateAdStateEndpoint: Function;
            subscribeToAdFormat: Function;
            subscribeToState: Function;
            getAdState: Function;
            overridePodcastMetadata: Function;
            logAudioVolume: Function;
          };
          enable: Function;
          disable: Function;
          subscribeToInStreamAds: Function;
          getInStreamAd: Function;
          onInStreamAdMessage: Function;
          skipToNext: Function;
        };
        enable: Function;
        disable: Function;
        logClick: Function;
        getEnabled: Function;
      };
      vto: {
        manager: {
          enabled: boolean;
          active: boolean;
          subscription: any;
          fireImpressionOnStart: boolean;
          onAdMessage: Function;
          focusState: {
            listeners: any;
            addFocusListener: Function;
            removeFocusListener: Function;
            removeAllFocusListeners: Function;
            hasFocus: Function;
          };
          videoTakeoverApi: {
            esperantoConnector: {
              createSlot: Function;
              clearSlot: Function;
              enableSlot: Function;
              getAds: Function;
              fetchSlot: Function;
              getPreviewAd: Function;
              getSlotSettings: Function;
              getSlot: Function;
              increaseStreamTime: Function;
              insertStreamAd: Function;
              overrideCountry: Function;
              putState: Function;
              putTargeting: Function;
              subscribeToProductState: Function;
              subscribeToInStreamAds: Function;
              subscribeToSlot: Function;
              triggerSlot: Function;
              skipToNextWithOverride: Function;
              setRequestHeader: Function;
              removeRequestHeader: Function;
              updateAdServerEndpoint: Function;
              updateAdStateEndpoint: Function;
              subscribeToAdFormat: Function;
              subscribeToState: Function;
              getAdState: Function;
              overridePodcastMetadata: Function;
              logAudioVolume: Function;
            };
            patchTargeting: Function;
            postEvent: Function;
          };
          inStreamApi: {
            enabled: boolean;
            inStreamAdsSubscription: any;
            inStreamAd: any;
            onAdMessageCallbacks: any;
            adsCoreConnector: {
              createSlot: Function;
              clearSlot: Function;
              enableSlot: Function;
              getAds: Function;
              fetchSlot: Function;
              getPreviewAd: Function;
              getSlotSettings: Function;
              getSlot: Function;
              increaseStreamTime: Function;
              insertStreamAd: Function;
              overrideCountry: Function;
              putState: Function;
              putTargeting: Function;
              subscribeToProductState: Function;
              subscribeToInStreamAds: Function;
              subscribeToSlot: Function;
              triggerSlot: Function;
              skipToNextWithOverride: Function;
              setRequestHeader: Function;
              removeRequestHeader: Function;
              updateAdServerEndpoint: Function;
              updateAdStateEndpoint: Function;
              subscribeToAdFormat: Function;
              subscribeToState: Function;
              getAdState: Function;
              overridePodcastMetadata: Function;
              logAudioVolume: Function;
            };
            enable: Function;
            disable: Function;
            subscribeToInStreamAds: Function;
            getInStreamAd: Function;
            onInStreamAdMessage: Function;
            skipToNext: Function;
          };
          enable: Function;
          disable: Function;
          logEvent: Function;
          onRender: Function;
          onFocusChanged: Function;
          parseInfo: Function;
          resetState: Function;
          handleApplicationGainedFocus: Function;
          handleApplicationLostFocus: Function;
          log: Function;
          onCreated: Function;
          onEnded: Function;
          onStarted: Function;
          onStateUpdate: Function;
          onReady: Function;
          getEnabled: Function;
        };
        factories: any;
      };
      hpto: {
        timeOfLastViewUpdate: number;
        refreshCallback: Function;
        visibilityState: string;
        createTrackingPixelImage: Function;
        onVisibilityChanged: Function;
        log: Function;
        logAdEventError: Function;
        mapData: Function;
        handleTrackingUrl: Function;
        hptoApi: {
          adsCoreConnector: {
            createSlot: Function;
            clearSlot: Function;
            enableSlot: Function;
            getAds: Function;
            fetchSlot: Function;
            getPreviewAd: Function;
            getSlotSettings: Function;
            getSlot: Function;
            increaseStreamTime: Function;
            insertStreamAd: Function;
            overrideCountry: Function;
            putState: Function;
            putTargeting: Function;
            subscribeToProductState: Function;
            subscribeToInStreamAds: Function;
            subscribeToSlot: Function;
            triggerSlot: Function;
            skipToNextWithOverride: Function;
            setRequestHeader: Function;
            removeRequestHeader: Function;
            updateAdServerEndpoint: Function;
            updateAdStateEndpoint: Function;
            subscribeToAdFormat: Function;
            subscribeToState: Function;
            getAdState: Function;
            overridePodcastMetadata: Function;
            logAudioVolume: Function;
          };
          nativeHptoApi: {
            mapEpisode: Function;
            mapTrack: Function;
            mapDefaultData: Function;
            spotifyTransport: {
              pendingRequests: {
                has: Function;
                add: Function;
                delete: Function;
                clear: Function;
                union: Function;
                intersection: Function;
                difference: Function;
                symmetricDifference: Function;
                isSubsetOf: Function;
                isSupersetOf: Function;
                isDisjointFrom: Function;
              };
              resetPendingRequests: Function;
              build: Function;
              accessToken: any;
              globalRequestHeaders: any;
              market: any;
              locale: any;
            };
            endpoints: {
              Album: {
                getAlbum: Function;
              };
              Artist: {
                getArtist: Function;
              };
              Playlist: {
                getOnDemandPlaylists: Function;
                getPlaylist: Function;
              };
              Track: {
                getTrack: Function;
              };
              Show: {
                createCheckoutSession: Function;
                getEpisode: Function;
                getShow: Function;
              };
            };
            imageSelection: Function;
            getAlbum: Function;
            getArtist: Function;
            getEpisode: Function;
            getPlaylist: Function;
            getShow: Function;
            getTrack: Function;
          };
          esperantoPreviewParser: {
            parsePreview: Function;
            isPreviewServiceAd: Function;
            getKeyByValue: Function;
            renameImageBannerField: Function;
            handleNativeEl: Function;
            createInteractiveIframe: Function;
          };
          eventSender: {
            instanceContexts: {
              context_application_desktop: {
                version_code: number;
                version_string: string;
              };
              context_client_id: {
                value: string;
              };
              context_installation_id: {
                value: string;
              };
              context_device_desktop: {
                device_id: string;
                device_manufacturer: string;
                device_model: string;
                os_version: string;
                platform_type: string;
              };
            };
            uploadingInProgress: boolean;
            transport: {
              authenticate: Function;
              isConnected: Function;
              isAuthenticated: Function;
              isReconnecting: Function;
              isOnline: Function;
              connect: Function;
              disconnect: Function;
              forceDisconnect: Function;
              forceTokenRefresh: Function;
              getInitTime: Function;
              getEndpoints: Function;
              getLastToken: Function;
              toPublic: Function;
              hasOwnerRef: Function;
              appendTokenQuery: Function;
              appendLastTokenQuery: Function;
              matchMessages: Function;
              unmatchMessages: Function;
              handlePushRequests: Function;
              unhandlePushRequests: Function;
              request: Function;
              addPlugin: Function;
              removePlugin: Function;
              hasPlugin: Function;
              getPluginAPI: Function;
              getConnectionId: Function;
              removeAllListeners: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            ownerProvider: Function;
            uploaders: {
              authorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
              unauthorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
            };
            useOptimizedESS2NA: boolean;
            sendESStats: Function;
            flush: Function;
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            droppedEventsTracker: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              updateDroppedEventCount: Function;
              getDroppedEventCounters: Function;
              getDroppedEventsCountersPerSequenceId: Function;
              updateReportedEventCounters: Function;
            };
            eventsManager: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              getEvent: Function;
              getEventKey: Function;
              getGlobalSequenceNumberFromEventKey: Function;
              addEvent: Function;
              getEventsKeys: Function;
              getEvents: Function;
              getEventsKeysPerSequenceId: Function;
              removeEvents: Function;
            };
            installationId: string;
            sequenceIdProvider: {
              installationId: string;
              getIdHash: Function;
              getId: Function;
            };
            sequenceNumberProvider: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              commitSequenceNumber: Function;
              getNextSequenceNumber: Function;
              generateNextSequenceNumber: Function;
              generateNextEventSequenceNumber: Function;
              generateNextGlobalSequenceNumber: Function;
              getEventsSequenceNumbers: Function;
              getSequenceNumbersPerSequenceId: Function;
            };
            statsProvider: {
              getInitialESSData: Function;
              addEventsToESSData: Function;
              addLossStatsData: Function;
              addDroppedEventsCountersData: Function;
              addDroppedEventsCounters: Function;
              provideEventSenderStats: Function;
            };
            initSendingEvents: Function;
            initializeContexts: Function;
            buildEvent: Function;
            getSpecificContext: Function;
            setupInstallationId: Function;
            getStorageId: Function;
            onBeforeDisconnect: Function;
            lastFlush: Function;
            sendEvents: Function;
            sendESS2NAWithOptimization: Function;
            commitAndUploadESStats: Function;
            onSuccessfullySentESStats: Function;
            sendToGabito: Function;
            getEvents: Function;
            storeEvent: Function;
            validateEventData: Function;
            send: Function;
            hasContext: Function;
            destroy: Function;
            getStorageType: Function;
            isUsingESS2NAOptimization: Function;
            getVersion: Function;
            finalFlush: Function;
            createEvent: Function;
            on: Function;
            addListener: Function;
            addListeners: Function;
            once: Function;
            removeListener: Function;
            removeListeners: Function;
            removeAllListeners: Function;
            emit: Function;
            emitSync: Function;
            emitEvent: Function;
            emitEventSync: Function;
            emitAndWait: Function;
            emitEventAndWait: Function;
            proxyEmit: Function;
            proxyEmitSync: Function;
            proxyEmitAll: Function;
            proxyEmitAllSync: Function;
            onAddListener: Function;
            onRemoveListener: Function;
          };
          getSlot: Function;
          logEvent: Function;
          subscribeToPreview: Function;
          getAlgoPlaylistInfo: Function;
          getAlbum: Function;
          getArtist: Function;
          getEpisode: Function;
          getPlaylist: Function;
          getShow: Function;
          getTrack: Function;
        };
        focusState: {
          listeners: any;
          addFocusListener: Function;
          removeFocusListener: Function;
          removeAllFocusListeners: Function;
          hasFocus: Function;
        };
        visibilityObserver: {
          onObservation: Function;
          currentState: string;
          intersectionObserver: {
            disconnect: Function;
            observe: Function;
            takeRecords: Function;
            unobserve: Function;
          };
          observe: Function;
          disconnect: Function;
        };
        offlineObserver: {
          isOnline: boolean;
          getOnlineStatus: Function;
        };
        appStartupId: string;
        trackingPixelDiv: {
          onmouseenter: any;
          onmouseleave: any;
          attachInternals: Function;
          blur: Function;
          click: Function;
          focus: Function;
          hidePopover: Function;
          showPopover: Function;
          togglePopover: Function;
          after: Function;
          animate: Function;
          append: Function;
          attachShadow: Function;
          before: Function;
          checkVisibility: Function;
          closest: Function;
          computedStyleMap: Function;
          getAnimations: Function;
          getAttribute: Function;
          getAttributeNS: Function;
          getAttributeNames: Function;
          getAttributeNode: Function;
          getAttributeNodeNS: Function;
          getBoundingClientRect: Function;
          getClientRects: Function;
          getElementsByClassName: Function;
          getElementsByTagName: Function;
          getElementsByTagNameNS: Function;
          getHTML: Function;
          hasAttribute: Function;
          hasAttributeNS: Function;
          hasAttributes: Function;
          hasPointerCapture: Function;
          insertAdjacentElement: Function;
          insertAdjacentHTML: Function;
          insertAdjacentText: Function;
          matches: Function;
          prepend: Function;
          querySelector: Function;
          querySelectorAll: Function;
          releasePointerCapture: Function;
          remove: Function;
          removeAttribute: Function;
          removeAttributeNS: Function;
          removeAttributeNode: Function;
          replaceChildren: Function;
          replaceWith: Function;
          requestFullscreen: Function;
          requestPointerLock: Function;
          scroll: Function;
          scrollBy: Function;
          scrollIntoView: Function;
          scrollIntoViewIfNeeded: Function;
          scrollTo: Function;
          setAttribute: Function;
          setAttributeNS: Function;
          setAttributeNode: Function;
          setAttributeNodeNS: Function;
          setHTMLUnsafe: Function;
          setPointerCapture: Function;
          toggleAttribute: Function;
          webkitMatchesSelector: Function;
          webkitRequestFullScreen: Function;
          webkitRequestFullscreen: Function;
          ELEMENT_NODE: number;
          ATTRIBUTE_NODE: number;
          TEXT_NODE: number;
          CDATA_SECTION_NODE: number;
          ENTITY_REFERENCE_NODE: number;
          ENTITY_NODE: number;
          PROCESSING_INSTRUCTION_NODE: number;
          COMMENT_NODE: number;
          DOCUMENT_NODE: number;
          DOCUMENT_TYPE_NODE: number;
          DOCUMENT_FRAGMENT_NODE: number;
          NOTATION_NODE: number;
          DOCUMENT_POSITION_DISCONNECTED: number;
          DOCUMENT_POSITION_PRECEDING: number;
          DOCUMENT_POSITION_FOLLOWING: number;
          DOCUMENT_POSITION_CONTAINS: number;
          DOCUMENT_POSITION_CONTAINED_BY: number;
          DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
          appendChild: Function;
          cloneNode: Function;
          compareDocumentPosition: Function;
          contains: Function;
          getRootNode: Function;
          hasChildNodes: Function;
          insertBefore: Function;
          isDefaultNamespace: Function;
          isEqualNode: Function;
          isSameNode: Function;
          lookupNamespaceURI: Function;
          lookupPrefix: Function;
          normalize: Function;
          removeChild: Function;
          replaceChild: Function;
          addEventListener: Function;
          dispatchEvent: Function;
          removeEventListener: Function;
        };
        subscribeToPreview: Function;
        onRefresh: Function;
        fetchTemplate: Function;
        fetchCreative: Function;
        logEvent: Function;
        logErrorEvent: Function;
        trackPixelClicked: Function;
        trackPixelViewed: Function;
        logViewed: Function;
        maybeTriggerRefresh: Function;
        viewRendered: Function;
        viewDestroyed: Function;
        onFocusChanged: Function;
        maybeModifyUrl: Function;
        createTrackingList: Function;
        getNativeData: Function;
      };
      billboard: {
        enabled: boolean;
        activating: boolean;
        viewedTimestamp: number;
        onActivity: Function;
        onAdMessage: Function;
        focusMinimize: Function;
        finish: Function;
        triggerAutoMinimizeIfPossible: Function;
        displayBillboard: Function;
        billboardApi: {
          adsCoreConnector: {
            createSlot: Function;
            clearSlot: Function;
            enableSlot: Function;
            getAds: Function;
            fetchSlot: Function;
            getPreviewAd: Function;
            getSlotSettings: Function;
            getSlot: Function;
            increaseStreamTime: Function;
            insertStreamAd: Function;
            overrideCountry: Function;
            putState: Function;
            putTargeting: Function;
            subscribeToProductState: Function;
            subscribeToInStreamAds: Function;
            subscribeToSlot: Function;
            triggerSlot: Function;
            skipToNextWithOverride: Function;
            setRequestHeader: Function;
            removeRequestHeader: Function;
            updateAdServerEndpoint: Function;
            updateAdStateEndpoint: Function;
            subscribeToAdFormat: Function;
            subscribeToState: Function;
            getAdState: Function;
            overridePodcastMetadata: Function;
            logAudioVolume: Function;
          };
          createSlot: Function;
          getSlotConfiguration: Function;
          patchTargeting: Function;
          postEvent: Function;
          postToSlot: Function;
          subscribeToSlotType: Function;
          triggerSlotClearAll: Function;
        };
        focusState: {
          listeners: any;
          addFocusListener: Function;
          removeFocusListener: Function;
          removeAllFocusListeners: Function;
          hasFocus: Function;
        };
        enable: Function;
        disable: Function;
        minimize: Function;
        adClick: Function;
        onRender: Function;
        onError: Function;
        onFinish: Function;
        onFocusChanged: Function;
        handleDiscard: Function;
        handlePreview: Function;
        isPreviewServiceAd: Function;
        resetState: Function;
        handleApplicationGainedFocus: Function;
        handleApplicationLostFocus: Function;
        getFocusTimeoutMs: Function;
        logEvent: Function;
        clearSlot: Function;
        mapBillboardData: Function;
      };
      leaderboard: {
        fetching: boolean;
        enabled: boolean;
        currentAd: {
          creativeId: any;
          lineItemId: any;
          ad: any;
        };
        handleLeaderboardMessage: Function;
        onAdSlotEvent: Function;
        appStartupId: string;
        adPlaybackId: any;
        frameSrc: string;
        focusState: {
          listeners: any;
          addFocusListener: Function;
          removeFocusListener: Function;
          removeAllFocusListeners: Function;
          hasFocus: Function;
        };
        leaderboardApi: {
          adsCoreConnector: {
            createSlot: Function;
            clearSlot: Function;
            enableSlot: Function;
            getAds: Function;
            fetchSlot: Function;
            getPreviewAd: Function;
            getSlotSettings: Function;
            getSlot: Function;
            increaseStreamTime: Function;
            insertStreamAd: Function;
            overrideCountry: Function;
            putState: Function;
            putTargeting: Function;
            subscribeToProductState: Function;
            subscribeToInStreamAds: Function;
            subscribeToSlot: Function;
            triggerSlot: Function;
            skipToNextWithOverride: Function;
            setRequestHeader: Function;
            removeRequestHeader: Function;
            updateAdServerEndpoint: Function;
            updateAdStateEndpoint: Function;
            subscribeToAdFormat: Function;
            subscribeToState: Function;
            getAdState: Function;
            overridePodcastMetadata: Function;
            logAudioVolume: Function;
          };
          subscribeToSlotType: Function;
          createAndEnableSlot: Function;
          getSlot: Function;
          getConfig: Function;
          normalizeConfig: Function;
          coerceDisplayTimeIntervalMs: Function;
        };
        refreshDecisioner: {
          viewTimer: number;
          lastOnlineStatus: boolean;
          focusState: {
            listeners: any;
            addFocusListener: Function;
            removeFocusListener: Function;
            removeAllFocusListeners: Function;
            hasFocus: Function;
          };
          delegate: {
            fetching: boolean;
            enabled: boolean;
            currentAd: {
              creativeId: any;
              lineItemId: any;
              ad: any;
            };
            handleLeaderboardMessage: Function;
            onAdSlotEvent: Function;
            appStartupId: string;
            adPlaybackId: any;
            frameSrc: string;
            focusState: {
              listeners: any;
              addFocusListener: Function;
              removeFocusListener: Function;
              removeAllFocusListeners: Function;
              hasFocus: Function;
            };
            leaderboardApi: {
              adsCoreConnector: {
                createSlot: Function;
                clearSlot: Function;
                enableSlot: Function;
                getAds: Function;
                fetchSlot: Function;
                getPreviewAd: Function;
                getSlotSettings: Function;
                getSlot: Function;
                increaseStreamTime: Function;
                insertStreamAd: Function;
                overrideCountry: Function;
                putState: Function;
                putTargeting: Function;
                subscribeToProductState: Function;
                subscribeToInStreamAds: Function;
                subscribeToSlot: Function;
                triggerSlot: Function;
                skipToNextWithOverride: Function;
                setRequestHeader: Function;
                removeRequestHeader: Function;
                updateAdServerEndpoint: Function;
                updateAdStateEndpoint: Function;
                subscribeToAdFormat: Function;
                subscribeToState: Function;
                getAdState: Function;
                overridePodcastMetadata: Function;
                logAudioVolume: Function;
              };
              subscribeToSlotType: Function;
              createAndEnableSlot: Function;
              getSlot: Function;
              getConfig: Function;
              normalizeConfig: Function;
              coerceDisplayTimeIntervalMs: Function;
            };
            refreshDecisioner: {
              viewTimer: number;
              lastOnlineStatus: boolean;
              focusState: {
                listeners: any;
                addFocusListener: Function;
                removeFocusListener: Function;
                removeAllFocusListeners: Function;
                hasFocus: Function;
              };
              delegate: {
                fetching: boolean;
                enabled: boolean;
                currentAd: {
                  creativeId: any;
                  lineItemId: any;
                  ad: any;
                };
                handleLeaderboardMessage: Function;
                onAdSlotEvent: Function;
                appStartupId: string;
                adPlaybackId: any;
                frameSrc: string;
                focusState: {
                  listeners: any;
                  addFocusListener: Function;
                  removeFocusListener: Function;
                  removeAllFocusListeners: Function;
                  hasFocus: Function;
                };
                leaderboardApi: {
                  adsCoreConnector: {
                    createSlot: Function;
                    clearSlot: Function;
                    enableSlot: Function;
                    getAds: Function;
                    fetchSlot: Function;
                    getPreviewAd: Function;
                    getSlotSettings: Function;
                    getSlot: Function;
                    increaseStreamTime: Function;
                    insertStreamAd: Function;
                    overrideCountry: Function;
                    putState: Function;
                    putTargeting: Function;
                    subscribeToProductState: Function;
                    subscribeToInStreamAds: Function;
                    subscribeToSlot: Function;
                    triggerSlot: Function;
                    skipToNextWithOverride: Function;
                    setRequestHeader: Function;
                    removeRequestHeader: Function;
                    updateAdServerEndpoint: Function;
                    updateAdStateEndpoint: Function;
                    subscribeToAdFormat: Function;
                    subscribeToState: Function;
                    getAdState: Function;
                    overridePodcastMetadata: Function;
                    logAudioVolume: Function;
                  };
                  subscribeToSlotType: Function;
                  createAndEnableSlot: Function;
                  getSlot: Function;
                  getConfig: Function;
                  normalizeConfig: Function;
                  coerceDisplayTimeIntervalMs: Function;
                };
                refreshDecisioner: {
                  viewTimer: number;
                  lastOnlineStatus: boolean;
                  focusState: {
                    listeners: any;
                    addFocusListener: Function;
                    removeFocusListener: Function;
                    removeAllFocusListeners: Function;
                    hasFocus: Function;
                  };
                  delegate: {
                    fetching: boolean;
                    enabled: boolean;
                    currentAd: {
                      creativeId: any;
                      lineItemId: any;
                      ad: any;
                    };
                    handleLeaderboardMessage: Function;
                    onAdSlotEvent: Function;
                    appStartupId: string;
                    adPlaybackId: any;
                    frameSrc: string;
                    focusState: {
                      listeners: any;
                      addFocusListener: Function;
                      removeFocusListener: Function;
                      removeAllFocusListeners: Function;
                      hasFocus: Function;
                    };
                    leaderboardApi: {
                      adsCoreConnector: {
                        createSlot: Function;
                        clearSlot: Function;
                        enableSlot: Function;
                        getAds: Function;
                        fetchSlot: Function;
                        getPreviewAd: Function;
                        getSlotSettings: Function;
                        getSlot: Function;
                        increaseStreamTime: Function;
                        insertStreamAd: Function;
                        overrideCountry: Function;
                        putState: Function;
                        putTargeting: Function;
                        subscribeToProductState: Function;
                        subscribeToInStreamAds: Function;
                        subscribeToSlot: Function;
                        triggerSlot: Function;
                        skipToNextWithOverride: Function;
                        setRequestHeader: Function;
                        removeRequestHeader: Function;
                        updateAdServerEndpoint: Function;
                        updateAdStateEndpoint: Function;
                        subscribeToAdFormat: Function;
                        subscribeToState: Function;
                        getAdState: Function;
                        overridePodcastMetadata: Function;
                        logAudioVolume: Function;
                      };
                      subscribeToSlotType: Function;
                      createAndEnableSlot: Function;
                      getSlot: Function;
                      getConfig: Function;
                      normalizeConfig: Function;
                      coerceDisplayTimeIntervalMs: Function;
                    };
                    refreshDecisioner: {
                      viewTimer: number;
                      lastOnlineStatus: boolean;
                      focusState: {
                        listeners: any;
                        addFocusListener: Function;
                        removeFocusListener: Function;
                        removeAllFocusListeners: Function;
                        hasFocus: Function;
                      };
                      delegate: {
                        fetching: boolean;
                        enabled: boolean;
                        currentAd: {
                          creativeId: any;
                          lineItemId: any;
                          ad: any;
                        };
                        handleLeaderboardMessage: Function;
                        onAdSlotEvent: Function;
                        appStartupId: string;
                        adPlaybackId: any;
                        frameSrc: string;
                        focusState: {
                          listeners: any;
                          addFocusListener: Function;
                          removeFocusListener: Function;
                          removeAllFocusListeners: Function;
                          hasFocus: Function;
                        };
                        leaderboardApi: {
                          adsCoreConnector: {
                            createSlot: Function;
                            clearSlot: Function;
                            enableSlot: Function;
                            getAds: Function;
                            fetchSlot: Function;
                            getPreviewAd: Function;
                            getSlotSettings: Function;
                            getSlot: Function;
                            increaseStreamTime: Function;
                            insertStreamAd: Function;
                            overrideCountry: Function;
                            putState: Function;
                            putTargeting: Function;
                            subscribeToProductState: Function;
                            subscribeToInStreamAds: Function;
                            subscribeToSlot: Function;
                            triggerSlot: Function;
                            skipToNextWithOverride: Function;
                            setRequestHeader: Function;
                            removeRequestHeader: Function;
                            updateAdServerEndpoint: Function;
                            updateAdStateEndpoint: Function;
                            subscribeToAdFormat: Function;
                            subscribeToState: Function;
                            getAdState: Function;
                            overridePodcastMetadata: Function;
                            logAudioVolume: Function;
                          };
                          subscribeToSlotType: Function;
                          createAndEnableSlot: Function;
                          getSlot: Function;
                          getConfig: Function;
                          normalizeConfig: Function;
                          coerceDisplayTimeIntervalMs: Function;
                        };
                        refreshDecisioner: {
                          viewTimer: number;
                          lastOnlineStatus: boolean;
                          focusState: {
                            listeners: any;
                            addFocusListener: Function;
                            removeFocusListener: Function;
                            removeAllFocusListeners: Function;
                            hasFocus: Function;
                          };
                          delegate: {
                            fetching: boolean;
                            enabled: boolean;
                            currentAd: {
                              creativeId: any;
                              lineItemId: any;
                              ad: any;
                            };
                            handleLeaderboardMessage: Function;
                            onAdSlotEvent: Function;
                            appStartupId: string;
                            adPlaybackId: any;
                            frameSrc: string;
                            focusState: {
                              listeners: any;
                              addFocusListener: Function;
                              removeFocusListener: Function;
                              removeAllFocusListeners: Function;
                              hasFocus: Function;
                            };
                            leaderboardApi: {
                              adsCoreConnector: {
                                createSlot: Function;
                                clearSlot: Function;
                                enableSlot: Function;
                                getAds: Function;
                                fetchSlot: Function;
                                getPreviewAd: Function;
                                getSlotSettings: Function;
                                getSlot: Function;
                                increaseStreamTime: Function;
                                insertStreamAd: Function;
                                overrideCountry: Function;
                                putState: Function;
                                putTargeting: Function;
                                subscribeToProductState: Function;
                                subscribeToInStreamAds: Function;
                                subscribeToSlot: Function;
                                triggerSlot: Function;
                                skipToNextWithOverride: Function;
                                setRequestHeader: Function;
                                removeRequestHeader: Function;
                                updateAdServerEndpoint: Function;
                                updateAdStateEndpoint: Function;
                                subscribeToAdFormat: Function;
                                subscribeToState: Function;
                                getAdState: Function;
                                overridePodcastMetadata: Function;
                                logAudioVolume: Function;
                              };
                              subscribeToSlotType: Function;
                              createAndEnableSlot: Function;
                              getSlot: Function;
                              getConfig: Function;
                              normalizeConfig: Function;
                              coerceDisplayTimeIntervalMs: Function;
                            };
                            refreshDecisioner: {
                              viewTimer: number;
                              lastOnlineStatus: boolean;
                              focusState: {
                                listeners: any;
                                addFocusListener: Function;
                                removeFocusListener: Function;
                                removeAllFocusListeners: Function;
                                hasFocus: Function;
                              };
                              delegate: {
                                fetching: boolean;
                                enabled: boolean;
                                currentAd: {
                                  creativeId: any;
                                  lineItemId: any;
                                  ad: any;
                                };
                                handleLeaderboardMessage: Function;
                                onAdSlotEvent: Function;
                                appStartupId: string;
                                adPlaybackId: any;
                                frameSrc: string;
                                focusState: {
                                  listeners: any;
                                  addFocusListener: Function;
                                  removeFocusListener: Function;
                                  removeAllFocusListeners: Function;
                                  hasFocus: Function;
                                };
                                leaderboardApi: {
                                  adsCoreConnector: any;
                                  subscribeToSlotType: Function;
                                  createAndEnableSlot: Function;
                                  getSlot: Function;
                                  getConfig: Function;
                                  normalizeConfig: Function;
                                  coerceDisplayTimeIntervalMs: Function;
                                };
                                refreshDecisioner: {
                                  viewTimer: number;
                                  lastOnlineStatus: boolean;
                                  focusState: {
                                    listeners: any;
                                  };
                                  delegate: {
                                    fetching: boolean;
                                    enabled: boolean;
                                    currentAd: any;
                                    handleLeaderboardMessage: Function;
                                    onAdSlotEvent: Function;
                                    appStartupId: string;
                                    adPlaybackId: any;
                                    frameSrc: string;
                                    focusState: any;
                                    leaderboardApi: any;
                                    refreshDecisioner: any;
                                    leaderboardWrapper: any;
                                    eventSender: any;
                                    history: any;
                                    offlineObserver: any;
                                  };
                                  setRefreshDelegate: Function;
                                  onViewLoaded: Function;
                                  onViewUnloaded: Function;
                                  onLeaderboardEnabled: Function;
                                  onLeaderboardDisabled: Function;
                                  onNavigationChanged: Function;
                                  onlineStateChanged: Function;
                                  onFocusChanged: Function;
                                  updateViewTimer: Function;
                                  isPastViewThreshold: Function;
                                  notifyRefreshIfPossible: Function;
                                  startRefreshTimer: Function;
                                  triggerRefresh: Function;
                                };
                                leaderboardWrapper: any;
                                eventSender: {
                                  instanceContexts: {
                                    context_application_desktop: any;
                                    context_client_id: any;
                                    context_installation_id: any;
                                    context_device_desktop: any;
                                  };
                                  uploadingInProgress: boolean;
                                  transport: {
                                    authenticate: Function;
                                  };
                                  ownerProvider: Function;
                                  uploaders: {
                                    authorized: any;
                                    unauthorized: any;
                                  };
                                  useOptimizedESS2NA: boolean;
                                  sendESStats: Function;
                                  flush: Function;
                                  storageManager: {
                                    currentTotalSizeForEvents: number;
                                    currentTotalSizeForDroppedCounters: number;
                                    maxStorageCapacityForEventsInBytes: number;
                                    maxStorageCapacityForDroppedCountersInBytes: number;
                                    storageKeyPrefix: string;
                                    storage: any;
                                    configureMaxStorageCapacity: Function;
                                    setTotalEventStorageSizeAtStartup: Function;
                                    setTotalDroppedCountersStorageSizeAtStartup: Function;
                                  };
                                  droppedEventsTracker: {
                                    storageManager: any;
                                  };
                                  eventsManager: {
                                    storageManager: any;
                                  };
                                  installationId: string;
                                  sequenceIdProvider: {
                                    installationId: string;
                                  };
                                  sequenceNumberProvider: {
                                    storageManager: any;
                                  };
                                  statsProvider: any;
                                  initSendingEvents: Function;
                                  initializeContexts: Function;
                                  buildEvent: Function;
                                  getSpecificContext: Function;
                                  setupInstallationId: Function;
                                  getStorageId: Function;
                                  onBeforeDisconnect: Function;
                                  lastFlush: Function;
                                  sendEvents: Function;
                                  sendESS2NAWithOptimization: Function;
                                  commitAndUploadESStats: Function;
                                  onSuccessfullySentESStats: Function;
                                  sendToGabito: Function;
                                  getEvents: Function;
                                  storeEvent: Function;
                                  validateEventData: Function;
                                  send: Function;
                                  hasContext: Function;
                                  destroy: Function;
                                  getStorageType: Function;
                                  isUsingESS2NAOptimization: Function;
                                  getVersion: Function;
                                  finalFlush: Function;
                                };
                                history: {
                                  action: string;
                                  location: {
                                    pathname: string;
                                    search: string;
                                    hash: string;
                                    state: any;
                                    key: string;
                                  };
                                  index: number;
                                  createHref: Function;
                                  replace: Function;
                                  go: Function;
                                  goBack: Function;
                                  goForward: Function;
                                  canGo: Function;
                                  block: Function;
                                  listen: Function;
                                };
                                offlineObserver: {
                                  isOnline: boolean;
                                  getOnlineStatus: Function;
                                };
                                enableLeaderboard: Function;
                                setLeaderboardElement: Function;
                                onNavigationChanged: Function;
                                enableLeaderboardMessageHandler: Function;
                                disableLeaderboardMessageHandler: Function;
                                logLeaderboardEvent: Function;
                                requestConfig: Function;
                                requestSlot: Function;
                                fetchAndDisplayLeaderboard: Function;
                                adToLeaderboard: Function;
                                isPreviewServiceAd: Function;
                                renderLeaderboard: Function;
                                adFrameLoaded: Function;
                                disableLeaderboard: Function;
                                handleBadLeaderboard: Function;
                                onFocusChanged: Function;
                                refreshLeaderboard: Function;
                                setCurrentAd: Function;
                                getCurrentAd: Function;
                                clearCurrentAd: Function;
                              };
                              setRefreshDelegate: Function;
                              onViewLoaded: Function;
                              onViewUnloaded: Function;
                              onLeaderboardEnabled: Function;
                              onLeaderboardDisabled: Function;
                              onNavigationChanged: Function;
                              onlineStateChanged: Function;
                              onFocusChanged: Function;
                              updateViewTimer: Function;
                              isPastViewThreshold: Function;
                              notifyRefreshIfPossible: Function;
                              startRefreshTimer: Function;
                              triggerRefresh: Function;
                            };
                            leaderboardWrapper: any;
                            eventSender: {
                              instanceContexts: {
                                context_application_desktop: {
                                  version_code: number;
                                  version_string: string;
                                };
                                context_client_id: {
                                  value: string;
                                };
                                context_installation_id: {
                                  value: string;
                                };
                                context_device_desktop: {
                                  device_id: string;
                                  device_manufacturer: string;
                                  device_model: string;
                                  os_version: string;
                                  platform_type: string;
                                };
                              };
                              uploadingInProgress: boolean;
                              transport: {
                                authenticate: Function;
                                isConnected: Function;
                                isAuthenticated: Function;
                                isReconnecting: Function;
                                isOnline: Function;
                                connect: Function;
                                disconnect: Function;
                                forceDisconnect: Function;
                                forceTokenRefresh: Function;
                                getInitTime: Function;
                                getEndpoints: Function;
                                getLastToken: Function;
                                toPublic: Function;
                                hasOwnerRef: Function;
                                appendTokenQuery: Function;
                                appendLastTokenQuery: Function;
                                matchMessages: Function;
                                unmatchMessages: Function;
                                handlePushRequests: Function;
                                unhandlePushRequests: Function;
                                request: Function;
                                addPlugin: Function;
                                removePlugin: Function;
                                hasPlugin: Function;
                                getPluginAPI: Function;
                                getConnectionId: Function;
                                removeAllListeners: Function;
                                createEvent: Function;
                                on: Function;
                                addListener: Function;
                                addListeners: Function;
                                once: Function;
                                removeListener: Function;
                                removeListeners: Function;
                                emit: Function;
                                emitSync: Function;
                                emitEvent: Function;
                                emitEventSync: Function;
                                emitAndWait: Function;
                                emitEventAndWait: Function;
                                proxyEmit: Function;
                                proxyEmitSync: Function;
                                proxyEmitAll: Function;
                                proxyEmitAllSync: Function;
                                onAddListener: Function;
                                onRemoveListener: Function;
                              };
                              ownerProvider: Function;
                              uploaders: {
                                authorized: {
                                  upload: Function;
                                  lastUpload: Function;
                                  shouldBackoff: Function;
                                };
                                unauthorized: {
                                  upload: Function;
                                  lastUpload: Function;
                                  shouldBackoff: Function;
                                };
                              };
                              useOptimizedESS2NA: boolean;
                              sendESStats: Function;
                              flush: Function;
                              storageManager: {
                                currentTotalSizeForEvents: number;
                                currentTotalSizeForDroppedCounters: number;
                                maxStorageCapacityForEventsInBytes: number;
                                maxStorageCapacityForDroppedCountersInBytes: number;
                                storageKeyPrefix: string;
                                storage: {
                                  maxCapacityInBytes: number;
                                  adapter: any;
                                  flushStrategy: {
                                    kind: string;
                                    interval: number;
                                  };
                                  maxCapacityForDroppedInPercentage: number;
                                };
                                configureMaxStorageCapacity: Function;
                                setTotalEventStorageSizeAtStartup: Function;
                                setTotalDroppedCountersStorageSizeAtStartup: Function;
                                createStorage: Function;
                                getItemSizeInBytes: Function;
                                canMakeEventsStorageFull: Function;
                                canMakeDroppedCountersStorageFull: Function;
                                getOrCreateId: Function;
                                updateItemInEventsStorage: Function;
                                updateItemInDroppedCountersStorage: Function;
                                addItemInEventsStorage: Function;
                                addItemInDroppedCountersStorage: Function;
                                setItem: Function;
                                getItem: Function;
                                removeItemInEventsStorage: Function;
                                removeItemInDroppedCountersStorage: Function;
                                getKeys: Function;
                                clear: Function;
                                setCounterItem: Function;
                              };
                              droppedEventsTracker: {
                                storageManager: {
                                  currentTotalSizeForEvents: number;
                                  currentTotalSizeForDroppedCounters: number;
                                  maxStorageCapacityForEventsInBytes: number;
                                  maxStorageCapacityForDroppedCountersInBytes: number;
                                  storageKeyPrefix: string;
                                  storage: {
                                    maxCapacityInBytes: number;
                                    adapter: any;
                                    flushStrategy: any;
                                    maxCapacityForDroppedInPercentage: number;
                                  };
                                  configureMaxStorageCapacity: Function;
                                  setTotalEventStorageSizeAtStartup: Function;
                                  setTotalDroppedCountersStorageSizeAtStartup: Function;
                                  createStorage: Function;
                                  getItemSizeInBytes: Function;
                                  canMakeEventsStorageFull: Function;
                                  canMakeDroppedCountersStorageFull: Function;
                                  getOrCreateId: Function;
                                  updateItemInEventsStorage: Function;
                                  updateItemInDroppedCountersStorage: Function;
                                  addItemInEventsStorage: Function;
                                  addItemInDroppedCountersStorage: Function;
                                  setItem: Function;
                                  getItem: Function;
                                  removeItemInEventsStorage: Function;
                                  removeItemInDroppedCountersStorage: Function;
                                  getKeys: Function;
                                  clear: Function;
                                  setCounterItem: Function;
                                };
                                updateDroppedEventCount: Function;
                                getDroppedEventCounters: Function;
                                getDroppedEventsCountersPerSequenceId: Function;
                                updateReportedEventCounters: Function;
                              };
                              eventsManager: {
                                storageManager: {
                                  currentTotalSizeForEvents: number;
                                  currentTotalSizeForDroppedCounters: number;
                                  maxStorageCapacityForEventsInBytes: number;
                                  maxStorageCapacityForDroppedCountersInBytes: number;
                                  storageKeyPrefix: string;
                                  storage: {
                                    maxCapacityInBytes: number;
                                    adapter: any;
                                    flushStrategy: any;
                                    maxCapacityForDroppedInPercentage: number;
                                  };
                                  configureMaxStorageCapacity: Function;
                                  setTotalEventStorageSizeAtStartup: Function;
                                  setTotalDroppedCountersStorageSizeAtStartup: Function;
                                  createStorage: Function;
                                  getItemSizeInBytes: Function;
                                  canMakeEventsStorageFull: Function;
                                  canMakeDroppedCountersStorageFull: Function;
                                  getOrCreateId: Function;
                                  updateItemInEventsStorage: Function;
                                  updateItemInDroppedCountersStorage: Function;
                                  addItemInEventsStorage: Function;
                                  addItemInDroppedCountersStorage: Function;
                                  setItem: Function;
                                  getItem: Function;
                                  removeItemInEventsStorage: Function;
                                  removeItemInDroppedCountersStorage: Function;
                                  getKeys: Function;
                                  clear: Function;
                                  setCounterItem: Function;
                                };
                                getEvent: Function;
                                getEventKey: Function;
                                getGlobalSequenceNumberFromEventKey: Function;
                                addEvent: Function;
                                getEventsKeys: Function;
                                getEvents: Function;
                                getEventsKeysPerSequenceId: Function;
                                removeEvents: Function;
                              };
                              installationId: string;
                              sequenceIdProvider: {
                                installationId: string;
                                getIdHash: Function;
                                getId: Function;
                              };
                              sequenceNumberProvider: {
                                storageManager: {
                                  currentTotalSizeForEvents: number;
                                  currentTotalSizeForDroppedCounters: number;
                                  maxStorageCapacityForEventsInBytes: number;
                                  maxStorageCapacityForDroppedCountersInBytes: number;
                                  storageKeyPrefix: string;
                                  storage: {
                                    maxCapacityInBytes: number;
                                    adapter: any;
                                    flushStrategy: any;
                                    maxCapacityForDroppedInPercentage: number;
                                  };
                                  configureMaxStorageCapacity: Function;
                                  setTotalEventStorageSizeAtStartup: Function;
                                  setTotalDroppedCountersStorageSizeAtStartup: Function;
                                  createStorage: Function;
                                  getItemSizeInBytes: Function;
                                  canMakeEventsStorageFull: Function;
                                  canMakeDroppedCountersStorageFull: Function;
                                  getOrCreateId: Function;
                                  updateItemInEventsStorage: Function;
                                  updateItemInDroppedCountersStorage: Function;
                                  addItemInEventsStorage: Function;
                                  addItemInDroppedCountersStorage: Function;
                                  setItem: Function;
                                  getItem: Function;
                                  removeItemInEventsStorage: Function;
                                  removeItemInDroppedCountersStorage: Function;
                                  getKeys: Function;
                                  clear: Function;
                                  setCounterItem: Function;
                                };
                                commitSequenceNumber: Function;
                                getNextSequenceNumber: Function;
                                generateNextSequenceNumber: Function;
                                generateNextEventSequenceNumber: Function;
                                generateNextGlobalSequenceNumber: Function;
                                getEventsSequenceNumbers: Function;
                                getSequenceNumbersPerSequenceId: Function;
                              };
                              statsProvider: {
                                getInitialESSData: Function;
                                addEventsToESSData: Function;
                                addLossStatsData: Function;
                                addDroppedEventsCountersData: Function;
                                addDroppedEventsCounters: Function;
                                provideEventSenderStats: Function;
                              };
                              initSendingEvents: Function;
                              initializeContexts: Function;
                              buildEvent: Function;
                              getSpecificContext: Function;
                              setupInstallationId: Function;
                              getStorageId: Function;
                              onBeforeDisconnect: Function;
                              lastFlush: Function;
                              sendEvents: Function;
                              sendESS2NAWithOptimization: Function;
                              commitAndUploadESStats: Function;
                              onSuccessfullySentESStats: Function;
                              sendToGabito: Function;
                              getEvents: Function;
                              storeEvent: Function;
                              validateEventData: Function;
                              send: Function;
                              hasContext: Function;
                              destroy: Function;
                              getStorageType: Function;
                              isUsingESS2NAOptimization: Function;
                              getVersion: Function;
                              finalFlush: Function;
                              createEvent: Function;
                              on: Function;
                              addListener: Function;
                              addListeners: Function;
                              once: Function;
                              removeListener: Function;
                              removeListeners: Function;
                              removeAllListeners: Function;
                              emit: Function;
                              emitSync: Function;
                              emitEvent: Function;
                              emitEventSync: Function;
                              emitAndWait: Function;
                              emitEventAndWait: Function;
                              proxyEmit: Function;
                              proxyEmitSync: Function;
                              proxyEmitAll: Function;
                              proxyEmitAllSync: Function;
                              onAddListener: Function;
                              onRemoveListener: Function;
                            };
                            history: {
                              action: string;
                              location: {
                                pathname: string;
                                search: string;
                                hash: string;
                                state: {
                                  navigationalRoot: string;
                                };
                                key: string;
                              };
                              index: number;
                              createHref: Function;
                              replace: Function;
                              go: Function;
                              goBack: Function;
                              goForward: Function;
                              canGo: Function;
                              block: Function;
                              listen: Function;
                            };
                            offlineObserver: {
                              isOnline: boolean;
                              getOnlineStatus: Function;
                            };
                            enableLeaderboard: Function;
                            setLeaderboardElement: Function;
                            onNavigationChanged: Function;
                            enableLeaderboardMessageHandler: Function;
                            disableLeaderboardMessageHandler: Function;
                            logLeaderboardEvent: Function;
                            requestConfig: Function;
                            requestSlot: Function;
                            fetchAndDisplayLeaderboard: Function;
                            adToLeaderboard: Function;
                            isPreviewServiceAd: Function;
                            renderLeaderboard: Function;
                            adFrameLoaded: Function;
                            disableLeaderboard: Function;
                            handleBadLeaderboard: Function;
                            onFocusChanged: Function;
                            refreshLeaderboard: Function;
                            setCurrentAd: Function;
                            getCurrentAd: Function;
                            clearCurrentAd: Function;
                          };
                          setRefreshDelegate: Function;
                          onViewLoaded: Function;
                          onViewUnloaded: Function;
                          onLeaderboardEnabled: Function;
                          onLeaderboardDisabled: Function;
                          onNavigationChanged: Function;
                          onlineStateChanged: Function;
                          onFocusChanged: Function;
                          updateViewTimer: Function;
                          isPastViewThreshold: Function;
                          notifyRefreshIfPossible: Function;
                          startRefreshTimer: Function;
                          triggerRefresh: Function;
                        };
                        leaderboardWrapper: any;
                        eventSender: {
                          instanceContexts: {
                            context_application_desktop: {
                              version_code: number;
                              version_string: string;
                            };
                            context_client_id: {
                              value: string;
                            };
                            context_installation_id: {
                              value: string;
                            };
                            context_device_desktop: {
                              device_id: string;
                              device_manufacturer: string;
                              device_model: string;
                              os_version: string;
                              platform_type: string;
                            };
                          };
                          uploadingInProgress: boolean;
                          transport: {
                            authenticate: Function;
                            isConnected: Function;
                            isAuthenticated: Function;
                            isReconnecting: Function;
                            isOnline: Function;
                            connect: Function;
                            disconnect: Function;
                            forceDisconnect: Function;
                            forceTokenRefresh: Function;
                            getInitTime: Function;
                            getEndpoints: Function;
                            getLastToken: Function;
                            toPublic: Function;
                            hasOwnerRef: Function;
                            appendTokenQuery: Function;
                            appendLastTokenQuery: Function;
                            matchMessages: Function;
                            unmatchMessages: Function;
                            handlePushRequests: Function;
                            unhandlePushRequests: Function;
                            request: Function;
                            addPlugin: Function;
                            removePlugin: Function;
                            hasPlugin: Function;
                            getPluginAPI: Function;
                            getConnectionId: Function;
                            removeAllListeners: Function;
                            createEvent: Function;
                            on: Function;
                            addListener: Function;
                            addListeners: Function;
                            once: Function;
                            removeListener: Function;
                            removeListeners: Function;
                            emit: Function;
                            emitSync: Function;
                            emitEvent: Function;
                            emitEventSync: Function;
                            emitAndWait: Function;
                            emitEventAndWait: Function;
                            proxyEmit: Function;
                            proxyEmitSync: Function;
                            proxyEmitAll: Function;
                            proxyEmitAllSync: Function;
                            onAddListener: Function;
                            onRemoveListener: Function;
                          };
                          ownerProvider: Function;
                          uploaders: {
                            authorized: {
                              upload: Function;
                              lastUpload: Function;
                              shouldBackoff: Function;
                              createEvent: Function;
                              on: Function;
                              addListener: Function;
                              addListeners: Function;
                              once: Function;
                              removeListener: Function;
                              removeListeners: Function;
                              removeAllListeners: Function;
                              emit: Function;
                              emitSync: Function;
                              emitEvent: Function;
                              emitEventSync: Function;
                              emitAndWait: Function;
                              emitEventAndWait: Function;
                              proxyEmit: Function;
                              proxyEmitSync: Function;
                              proxyEmitAll: Function;
                              proxyEmitAllSync: Function;
                              onAddListener: Function;
                              onRemoveListener: Function;
                            };
                            unauthorized: {
                              upload: Function;
                              lastUpload: Function;
                              shouldBackoff: Function;
                              createEvent: Function;
                              on: Function;
                              addListener: Function;
                              addListeners: Function;
                              once: Function;
                              removeListener: Function;
                              removeListeners: Function;
                              removeAllListeners: Function;
                              emit: Function;
                              emitSync: Function;
                              emitEvent: Function;
                              emitEventSync: Function;
                              emitAndWait: Function;
                              emitEventAndWait: Function;
                              proxyEmit: Function;
                              proxyEmitSync: Function;
                              proxyEmitAll: Function;
                              proxyEmitAllSync: Function;
                              onAddListener: Function;
                              onRemoveListener: Function;
                            };
                          };
                          useOptimizedESS2NA: boolean;
                          sendESStats: Function;
                          flush: Function;
                          storageManager: {
                            currentTotalSizeForEvents: number;
                            currentTotalSizeForDroppedCounters: number;
                            maxStorageCapacityForEventsInBytes: number;
                            maxStorageCapacityForDroppedCountersInBytes: number;
                            storageKeyPrefix: string;
                            storage: {
                              maxCapacityInBytes: number;
                              adapter: {
                                setItem: Function;
                                getItem: Function;
                                removeItem: Function;
                                clear: Function;
                                getKeys: Function;
                              };
                              flushStrategy: {
                                kind: string;
                                interval: number;
                              };
                              maxCapacityForDroppedInPercentage: number;
                            };
                            configureMaxStorageCapacity: Function;
                            setTotalEventStorageSizeAtStartup: Function;
                            setTotalDroppedCountersStorageSizeAtStartup: Function;
                            createStorage: Function;
                            getItemSizeInBytes: Function;
                            canMakeEventsStorageFull: Function;
                            canMakeDroppedCountersStorageFull: Function;
                            getOrCreateId: Function;
                            updateItemInEventsStorage: Function;
                            updateItemInDroppedCountersStorage: Function;
                            addItemInEventsStorage: Function;
                            addItemInDroppedCountersStorage: Function;
                            setItem: Function;
                            getItem: Function;
                            removeItemInEventsStorage: Function;
                            removeItemInDroppedCountersStorage: Function;
                            getKeys: Function;
                            clear: Function;
                            setCounterItem: Function;
                          };
                          droppedEventsTracker: {
                            storageManager: {
                              currentTotalSizeForEvents: number;
                              currentTotalSizeForDroppedCounters: number;
                              maxStorageCapacityForEventsInBytes: number;
                              maxStorageCapacityForDroppedCountersInBytes: number;
                              storageKeyPrefix: string;
                              storage: {
                                maxCapacityInBytes: number;
                                adapter: {
                                  setItem: Function;
                                  getItem: Function;
                                  removeItem: Function;
                                  clear: Function;
                                  getKeys: Function;
                                };
                                flushStrategy: {
                                  kind: string;
                                  interval: number;
                                };
                                maxCapacityForDroppedInPercentage: number;
                              };
                              configureMaxStorageCapacity: Function;
                              setTotalEventStorageSizeAtStartup: Function;
                              setTotalDroppedCountersStorageSizeAtStartup: Function;
                              createStorage: Function;
                              getItemSizeInBytes: Function;
                              canMakeEventsStorageFull: Function;
                              canMakeDroppedCountersStorageFull: Function;
                              getOrCreateId: Function;
                              updateItemInEventsStorage: Function;
                              updateItemInDroppedCountersStorage: Function;
                              addItemInEventsStorage: Function;
                              addItemInDroppedCountersStorage: Function;
                              setItem: Function;
                              getItem: Function;
                              removeItemInEventsStorage: Function;
                              removeItemInDroppedCountersStorage: Function;
                              getKeys: Function;
                              clear: Function;
                              setCounterItem: Function;
                            };
                            updateDroppedEventCount: Function;
                            getDroppedEventCounters: Function;
                            getDroppedEventsCountersPerSequenceId: Function;
                            updateReportedEventCounters: Function;
                          };
                          eventsManager: {
                            storageManager: {
                              currentTotalSizeForEvents: number;
                              currentTotalSizeForDroppedCounters: number;
                              maxStorageCapacityForEventsInBytes: number;
                              maxStorageCapacityForDroppedCountersInBytes: number;
                              storageKeyPrefix: string;
                              storage: {
                                maxCapacityInBytes: number;
                                adapter: {
                                  setItem: Function;
                                  getItem: Function;
                                  removeItem: Function;
                                  clear: Function;
                                  getKeys: Function;
                                };
                                flushStrategy: {
                                  kind: string;
                                  interval: number;
                                };
                                maxCapacityForDroppedInPercentage: number;
                              };
                              configureMaxStorageCapacity: Function;
                              setTotalEventStorageSizeAtStartup: Function;
                              setTotalDroppedCountersStorageSizeAtStartup: Function;
                              createStorage: Function;
                              getItemSizeInBytes: Function;
                              canMakeEventsStorageFull: Function;
                              canMakeDroppedCountersStorageFull: Function;
                              getOrCreateId: Function;
                              updateItemInEventsStorage: Function;
                              updateItemInDroppedCountersStorage: Function;
                              addItemInEventsStorage: Function;
                              addItemInDroppedCountersStorage: Function;
                              setItem: Function;
                              getItem: Function;
                              removeItemInEventsStorage: Function;
                              removeItemInDroppedCountersStorage: Function;
                              getKeys: Function;
                              clear: Function;
                              setCounterItem: Function;
                            };
                            getEvent: Function;
                            getEventKey: Function;
                            getGlobalSequenceNumberFromEventKey: Function;
                            addEvent: Function;
                            getEventsKeys: Function;
                            getEvents: Function;
                            getEventsKeysPerSequenceId: Function;
                            removeEvents: Function;
                          };
                          installationId: string;
                          sequenceIdProvider: {
                            installationId: string;
                            getIdHash: Function;
                            getId: Function;
                          };
                          sequenceNumberProvider: {
                            storageManager: {
                              currentTotalSizeForEvents: number;
                              currentTotalSizeForDroppedCounters: number;
                              maxStorageCapacityForEventsInBytes: number;
                              maxStorageCapacityForDroppedCountersInBytes: number;
                              storageKeyPrefix: string;
                              storage: {
                                maxCapacityInBytes: number;
                                adapter: {
                                  setItem: Function;
                                  getItem: Function;
                                  removeItem: Function;
                                  clear: Function;
                                  getKeys: Function;
                                };
                                flushStrategy: {
                                  kind: string;
                                  interval: number;
                                };
                                maxCapacityForDroppedInPercentage: number;
                              };
                              configureMaxStorageCapacity: Function;
                              setTotalEventStorageSizeAtStartup: Function;
                              setTotalDroppedCountersStorageSizeAtStartup: Function;
                              createStorage: Function;
                              getItemSizeInBytes: Function;
                              canMakeEventsStorageFull: Function;
                              canMakeDroppedCountersStorageFull: Function;
                              getOrCreateId: Function;
                              updateItemInEventsStorage: Function;
                              updateItemInDroppedCountersStorage: Function;
                              addItemInEventsStorage: Function;
                              addItemInDroppedCountersStorage: Function;
                              setItem: Function;
                              getItem: Function;
                              removeItemInEventsStorage: Function;
                              removeItemInDroppedCountersStorage: Function;
                              getKeys: Function;
                              clear: Function;
                              setCounterItem: Function;
                            };
                            commitSequenceNumber: Function;
                            getNextSequenceNumber: Function;
                            generateNextSequenceNumber: Function;
                            generateNextEventSequenceNumber: Function;
                            generateNextGlobalSequenceNumber: Function;
                            getEventsSequenceNumbers: Function;
                            getSequenceNumbersPerSequenceId: Function;
                          };
                          statsProvider: {
                            getInitialESSData: Function;
                            addEventsToESSData: Function;
                            addLossStatsData: Function;
                            addDroppedEventsCountersData: Function;
                            addDroppedEventsCounters: Function;
                            provideEventSenderStats: Function;
                          };
                          initSendingEvents: Function;
                          initializeContexts: Function;
                          buildEvent: Function;
                          getSpecificContext: Function;
                          setupInstallationId: Function;
                          getStorageId: Function;
                          onBeforeDisconnect: Function;
                          lastFlush: Function;
                          sendEvents: Function;
                          sendESS2NAWithOptimization: Function;
                          commitAndUploadESStats: Function;
                          onSuccessfullySentESStats: Function;
                          sendToGabito: Function;
                          getEvents: Function;
                          storeEvent: Function;
                          validateEventData: Function;
                          send: Function;
                          hasContext: Function;
                          destroy: Function;
                          getStorageType: Function;
                          isUsingESS2NAOptimization: Function;
                          getVersion: Function;
                          finalFlush: Function;
                          createEvent: Function;
                          on: Function;
                          addListener: Function;
                          addListeners: Function;
                          once: Function;
                          removeListener: Function;
                          removeListeners: Function;
                          removeAllListeners: Function;
                          emit: Function;
                          emitSync: Function;
                          emitEvent: Function;
                          emitEventSync: Function;
                          emitAndWait: Function;
                          emitEventAndWait: Function;
                          proxyEmit: Function;
                          proxyEmitSync: Function;
                          proxyEmitAll: Function;
                          proxyEmitAllSync: Function;
                          onAddListener: Function;
                          onRemoveListener: Function;
                        };
                        history: {
                          action: string;
                          location: {
                            pathname: string;
                            search: string;
                            hash: string;
                            state: {
                              navigationalRoot: string;
                            };
                            key: string;
                          };
                          index: number;
                          createHref: Function;
                          replace: Function;
                          go: Function;
                          goBack: Function;
                          goForward: Function;
                          canGo: Function;
                          block: Function;
                          listen: Function;
                        };
                        offlineObserver: {
                          isOnline: boolean;
                          getOnlineStatus: Function;
                        };
                        enableLeaderboard: Function;
                        setLeaderboardElement: Function;
                        onNavigationChanged: Function;
                        enableLeaderboardMessageHandler: Function;
                        disableLeaderboardMessageHandler: Function;
                        logLeaderboardEvent: Function;
                        requestConfig: Function;
                        requestSlot: Function;
                        fetchAndDisplayLeaderboard: Function;
                        adToLeaderboard: Function;
                        isPreviewServiceAd: Function;
                        renderLeaderboard: Function;
                        adFrameLoaded: Function;
                        disableLeaderboard: Function;
                        handleBadLeaderboard: Function;
                        onFocusChanged: Function;
                        refreshLeaderboard: Function;
                        setCurrentAd: Function;
                        getCurrentAd: Function;
                        clearCurrentAd: Function;
                      };
                      setRefreshDelegate: Function;
                      onViewLoaded: Function;
                      onViewUnloaded: Function;
                      onLeaderboardEnabled: Function;
                      onLeaderboardDisabled: Function;
                      onNavigationChanged: Function;
                      onlineStateChanged: Function;
                      onFocusChanged: Function;
                      updateViewTimer: Function;
                      isPastViewThreshold: Function;
                      notifyRefreshIfPossible: Function;
                      startRefreshTimer: Function;
                      triggerRefresh: Function;
                    };
                    leaderboardWrapper: any;
                    eventSender: {
                      instanceContexts: {
                        context_application_desktop: {
                          version_code: number;
                          version_string: string;
                        };
                        context_client_id: {
                          value: string;
                        };
                        context_installation_id: {
                          value: string;
                        };
                        context_device_desktop: {
                          device_id: string;
                          device_manufacturer: string;
                          device_model: string;
                          os_version: string;
                          platform_type: string;
                        };
                      };
                      uploadingInProgress: boolean;
                      transport: {
                        authenticate: Function;
                        isConnected: Function;
                        isAuthenticated: Function;
                        isReconnecting: Function;
                        isOnline: Function;
                        connect: Function;
                        disconnect: Function;
                        forceDisconnect: Function;
                        forceTokenRefresh: Function;
                        getInitTime: Function;
                        getEndpoints: Function;
                        getLastToken: Function;
                        toPublic: Function;
                        hasOwnerRef: Function;
                        appendTokenQuery: Function;
                        appendLastTokenQuery: Function;
                        matchMessages: Function;
                        unmatchMessages: Function;
                        handlePushRequests: Function;
                        unhandlePushRequests: Function;
                        request: Function;
                        addPlugin: Function;
                        removePlugin: Function;
                        hasPlugin: Function;
                        getPluginAPI: Function;
                        getConnectionId: Function;
                        removeAllListeners: Function;
                        createEvent: Function;
                        on: Function;
                        addListener: Function;
                        addListeners: Function;
                        once: Function;
                        removeListener: Function;
                        removeListeners: Function;
                        emit: Function;
                        emitSync: Function;
                        emitEvent: Function;
                        emitEventSync: Function;
                        emitAndWait: Function;
                        emitEventAndWait: Function;
                        proxyEmit: Function;
                        proxyEmitSync: Function;
                        proxyEmitAll: Function;
                        proxyEmitAllSync: Function;
                        onAddListener: Function;
                        onRemoveListener: Function;
                      };
                      ownerProvider: Function;
                      uploaders: {
                        authorized: {
                          upload: Function;
                          lastUpload: Function;
                          shouldBackoff: Function;
                          createEvent: Function;
                          on: Function;
                          addListener: Function;
                          addListeners: Function;
                          once: Function;
                          removeListener: Function;
                          removeListeners: Function;
                          removeAllListeners: Function;
                          emit: Function;
                          emitSync: Function;
                          emitEvent: Function;
                          emitEventSync: Function;
                          emitAndWait: Function;
                          emitEventAndWait: Function;
                          proxyEmit: Function;
                          proxyEmitSync: Function;
                          proxyEmitAll: Function;
                          proxyEmitAllSync: Function;
                          onAddListener: Function;
                          onRemoveListener: Function;
                        };
                        unauthorized: {
                          upload: Function;
                          lastUpload: Function;
                          shouldBackoff: Function;
                          createEvent: Function;
                          on: Function;
                          addListener: Function;
                          addListeners: Function;
                          once: Function;
                          removeListener: Function;
                          removeListeners: Function;
                          removeAllListeners: Function;
                          emit: Function;
                          emitSync: Function;
                          emitEvent: Function;
                          emitEventSync: Function;
                          emitAndWait: Function;
                          emitEventAndWait: Function;
                          proxyEmit: Function;
                          proxyEmitSync: Function;
                          proxyEmitAll: Function;
                          proxyEmitAllSync: Function;
                          onAddListener: Function;
                          onRemoveListener: Function;
                        };
                      };
                      useOptimizedESS2NA: boolean;
                      sendESStats: Function;
                      flush: Function;
                      storageManager: {
                        currentTotalSizeForEvents: number;
                        currentTotalSizeForDroppedCounters: number;
                        maxStorageCapacityForEventsInBytes: number;
                        maxStorageCapacityForDroppedCountersInBytes: number;
                        storageKeyPrefix: string;
                        storage: {
                          maxCapacityInBytes: number;
                          adapter: {
                            setItem: Function;
                            getItem: Function;
                            removeItem: Function;
                            clear: Function;
                            getKeys: Function;
                          };
                          flushStrategy: {
                            kind: string;
                            interval: number;
                          };
                          maxCapacityForDroppedInPercentage: number;
                        };
                        configureMaxStorageCapacity: Function;
                        setTotalEventStorageSizeAtStartup: Function;
                        setTotalDroppedCountersStorageSizeAtStartup: Function;
                        createStorage: Function;
                        getItemSizeInBytes: Function;
                        canMakeEventsStorageFull: Function;
                        canMakeDroppedCountersStorageFull: Function;
                        getOrCreateId: Function;
                        updateItemInEventsStorage: Function;
                        updateItemInDroppedCountersStorage: Function;
                        addItemInEventsStorage: Function;
                        addItemInDroppedCountersStorage: Function;
                        setItem: Function;
                        getItem: Function;
                        removeItemInEventsStorage: Function;
                        removeItemInDroppedCountersStorage: Function;
                        getKeys: Function;
                        clear: Function;
                        setCounterItem: Function;
                      };
                      droppedEventsTracker: {
                        storageManager: {
                          currentTotalSizeForEvents: number;
                          currentTotalSizeForDroppedCounters: number;
                          maxStorageCapacityForEventsInBytes: number;
                          maxStorageCapacityForDroppedCountersInBytes: number;
                          storageKeyPrefix: string;
                          storage: {
                            maxCapacityInBytes: number;
                            adapter: {
                              setItem: Function;
                              getItem: Function;
                              removeItem: Function;
                              clear: Function;
                              getKeys: Function;
                            };
                            flushStrategy: {
                              kind: string;
                              interval: number;
                            };
                            maxCapacityForDroppedInPercentage: number;
                          };
                          configureMaxStorageCapacity: Function;
                          setTotalEventStorageSizeAtStartup: Function;
                          setTotalDroppedCountersStorageSizeAtStartup: Function;
                          createStorage: Function;
                          getItemSizeInBytes: Function;
                          canMakeEventsStorageFull: Function;
                          canMakeDroppedCountersStorageFull: Function;
                          getOrCreateId: Function;
                          updateItemInEventsStorage: Function;
                          updateItemInDroppedCountersStorage: Function;
                          addItemInEventsStorage: Function;
                          addItemInDroppedCountersStorage: Function;
                          setItem: Function;
                          getItem: Function;
                          removeItemInEventsStorage: Function;
                          removeItemInDroppedCountersStorage: Function;
                          getKeys: Function;
                          clear: Function;
                          setCounterItem: Function;
                        };
                        updateDroppedEventCount: Function;
                        getDroppedEventCounters: Function;
                        getDroppedEventsCountersPerSequenceId: Function;
                        updateReportedEventCounters: Function;
                      };
                      eventsManager: {
                        storageManager: {
                          currentTotalSizeForEvents: number;
                          currentTotalSizeForDroppedCounters: number;
                          maxStorageCapacityForEventsInBytes: number;
                          maxStorageCapacityForDroppedCountersInBytes: number;
                          storageKeyPrefix: string;
                          storage: {
                            maxCapacityInBytes: number;
                            adapter: {
                              setItem: Function;
                              getItem: Function;
                              removeItem: Function;
                              clear: Function;
                              getKeys: Function;
                            };
                            flushStrategy: {
                              kind: string;
                              interval: number;
                            };
                            maxCapacityForDroppedInPercentage: number;
                          };
                          configureMaxStorageCapacity: Function;
                          setTotalEventStorageSizeAtStartup: Function;
                          setTotalDroppedCountersStorageSizeAtStartup: Function;
                          createStorage: Function;
                          getItemSizeInBytes: Function;
                          canMakeEventsStorageFull: Function;
                          canMakeDroppedCountersStorageFull: Function;
                          getOrCreateId: Function;
                          updateItemInEventsStorage: Function;
                          updateItemInDroppedCountersStorage: Function;
                          addItemInEventsStorage: Function;
                          addItemInDroppedCountersStorage: Function;
                          setItem: Function;
                          getItem: Function;
                          removeItemInEventsStorage: Function;
                          removeItemInDroppedCountersStorage: Function;
                          getKeys: Function;
                          clear: Function;
                          setCounterItem: Function;
                        };
                        getEvent: Function;
                        getEventKey: Function;
                        getGlobalSequenceNumberFromEventKey: Function;
                        addEvent: Function;
                        getEventsKeys: Function;
                        getEvents: Function;
                        getEventsKeysPerSequenceId: Function;
                        removeEvents: Function;
                      };
                      installationId: string;
                      sequenceIdProvider: {
                        installationId: string;
                        getIdHash: Function;
                        getId: Function;
                      };
                      sequenceNumberProvider: {
                        storageManager: {
                          currentTotalSizeForEvents: number;
                          currentTotalSizeForDroppedCounters: number;
                          maxStorageCapacityForEventsInBytes: number;
                          maxStorageCapacityForDroppedCountersInBytes: number;
                          storageKeyPrefix: string;
                          storage: {
                            maxCapacityInBytes: number;
                            adapter: {
                              setItem: Function;
                              getItem: Function;
                              removeItem: Function;
                              clear: Function;
                              getKeys: Function;
                            };
                            flushStrategy: {
                              kind: string;
                              interval: number;
                            };
                            maxCapacityForDroppedInPercentage: number;
                          };
                          configureMaxStorageCapacity: Function;
                          setTotalEventStorageSizeAtStartup: Function;
                          setTotalDroppedCountersStorageSizeAtStartup: Function;
                          createStorage: Function;
                          getItemSizeInBytes: Function;
                          canMakeEventsStorageFull: Function;
                          canMakeDroppedCountersStorageFull: Function;
                          getOrCreateId: Function;
                          updateItemInEventsStorage: Function;
                          updateItemInDroppedCountersStorage: Function;
                          addItemInEventsStorage: Function;
                          addItemInDroppedCountersStorage: Function;
                          setItem: Function;
                          getItem: Function;
                          removeItemInEventsStorage: Function;
                          removeItemInDroppedCountersStorage: Function;
                          getKeys: Function;
                          clear: Function;
                          setCounterItem: Function;
                        };
                        commitSequenceNumber: Function;
                        getNextSequenceNumber: Function;
                        generateNextSequenceNumber: Function;
                        generateNextEventSequenceNumber: Function;
                        generateNextGlobalSequenceNumber: Function;
                        getEventsSequenceNumbers: Function;
                        getSequenceNumbersPerSequenceId: Function;
                      };
                      statsProvider: {
                        getInitialESSData: Function;
                        addEventsToESSData: Function;
                        addLossStatsData: Function;
                        addDroppedEventsCountersData: Function;
                        addDroppedEventsCounters: Function;
                        provideEventSenderStats: Function;
                      };
                      initSendingEvents: Function;
                      initializeContexts: Function;
                      buildEvent: Function;
                      getSpecificContext: Function;
                      setupInstallationId: Function;
                      getStorageId: Function;
                      onBeforeDisconnect: Function;
                      lastFlush: Function;
                      sendEvents: Function;
                      sendESS2NAWithOptimization: Function;
                      commitAndUploadESStats: Function;
                      onSuccessfullySentESStats: Function;
                      sendToGabito: Function;
                      getEvents: Function;
                      storeEvent: Function;
                      validateEventData: Function;
                      send: Function;
                      hasContext: Function;
                      destroy: Function;
                      getStorageType: Function;
                      isUsingESS2NAOptimization: Function;
                      getVersion: Function;
                      finalFlush: Function;
                      createEvent: Function;
                      on: Function;
                      addListener: Function;
                      addListeners: Function;
                      once: Function;
                      removeListener: Function;
                      removeListeners: Function;
                      removeAllListeners: Function;
                      emit: Function;
                      emitSync: Function;
                      emitEvent: Function;
                      emitEventSync: Function;
                      emitAndWait: Function;
                      emitEventAndWait: Function;
                      proxyEmit: Function;
                      proxyEmitSync: Function;
                      proxyEmitAll: Function;
                      proxyEmitAllSync: Function;
                      onAddListener: Function;
                      onRemoveListener: Function;
                    };
                    history: {
                      action: string;
                      location: {
                        pathname: string;
                        search: string;
                        hash: string;
                        state: {
                          navigationalRoot: string;
                        };
                        key: string;
                      };
                      index: number;
                      createHref: Function;
                      replace: Function;
                      go: Function;
                      goBack: Function;
                      goForward: Function;
                      canGo: Function;
                      block: Function;
                      listen: Function;
                    };
                    offlineObserver: {
                      isOnline: boolean;
                      getOnlineStatus: Function;
                    };
                    enableLeaderboard: Function;
                    setLeaderboardElement: Function;
                    onNavigationChanged: Function;
                    enableLeaderboardMessageHandler: Function;
                    disableLeaderboardMessageHandler: Function;
                    logLeaderboardEvent: Function;
                    requestConfig: Function;
                    requestSlot: Function;
                    fetchAndDisplayLeaderboard: Function;
                    adToLeaderboard: Function;
                    isPreviewServiceAd: Function;
                    renderLeaderboard: Function;
                    adFrameLoaded: Function;
                    disableLeaderboard: Function;
                    handleBadLeaderboard: Function;
                    onFocusChanged: Function;
                    refreshLeaderboard: Function;
                    setCurrentAd: Function;
                    getCurrentAd: Function;
                    clearCurrentAd: Function;
                  };
                  setRefreshDelegate: Function;
                  onViewLoaded: Function;
                  onViewUnloaded: Function;
                  onLeaderboardEnabled: Function;
                  onLeaderboardDisabled: Function;
                  onNavigationChanged: Function;
                  onlineStateChanged: Function;
                  onFocusChanged: Function;
                  updateViewTimer: Function;
                  isPastViewThreshold: Function;
                  notifyRefreshIfPossible: Function;
                  startRefreshTimer: Function;
                  triggerRefresh: Function;
                };
                leaderboardWrapper: any;
                eventSender: {
                  instanceContexts: {
                    context_application_desktop: {
                      version_code: number;
                      version_string: string;
                    };
                    context_client_id: {
                      value: string;
                    };
                    context_installation_id: {
                      value: string;
                    };
                    context_device_desktop: {
                      device_id: string;
                      device_manufacturer: string;
                      device_model: string;
                      os_version: string;
                      platform_type: string;
                    };
                  };
                  uploadingInProgress: boolean;
                  transport: {
                    authenticate: Function;
                    isConnected: Function;
                    isAuthenticated: Function;
                    isReconnecting: Function;
                    isOnline: Function;
                    connect: Function;
                    disconnect: Function;
                    forceDisconnect: Function;
                    forceTokenRefresh: Function;
                    getInitTime: Function;
                    getEndpoints: Function;
                    getLastToken: Function;
                    toPublic: Function;
                    hasOwnerRef: Function;
                    appendTokenQuery: Function;
                    appendLastTokenQuery: Function;
                    matchMessages: Function;
                    unmatchMessages: Function;
                    handlePushRequests: Function;
                    unhandlePushRequests: Function;
                    request: Function;
                    addPlugin: Function;
                    removePlugin: Function;
                    hasPlugin: Function;
                    getPluginAPI: Function;
                    getConnectionId: Function;
                    removeAllListeners: Function;
                    createEvent: Function;
                    on: Function;
                    addListener: Function;
                    addListeners: Function;
                    once: Function;
                    removeListener: Function;
                    removeListeners: Function;
                    emit: Function;
                    emitSync: Function;
                    emitEvent: Function;
                    emitEventSync: Function;
                    emitAndWait: Function;
                    emitEventAndWait: Function;
                    proxyEmit: Function;
                    proxyEmitSync: Function;
                    proxyEmitAll: Function;
                    proxyEmitAllSync: Function;
                    onAddListener: Function;
                    onRemoveListener: Function;
                  };
                  ownerProvider: Function;
                  uploaders: {
                    authorized: {
                      upload: Function;
                      lastUpload: Function;
                      shouldBackoff: Function;
                      createEvent: Function;
                      on: Function;
                      addListener: Function;
                      addListeners: Function;
                      once: Function;
                      removeListener: Function;
                      removeListeners: Function;
                      removeAllListeners: Function;
                      emit: Function;
                      emitSync: Function;
                      emitEvent: Function;
                      emitEventSync: Function;
                      emitAndWait: Function;
                      emitEventAndWait: Function;
                      proxyEmit: Function;
                      proxyEmitSync: Function;
                      proxyEmitAll: Function;
                      proxyEmitAllSync: Function;
                      onAddListener: Function;
                      onRemoveListener: Function;
                    };
                    unauthorized: {
                      upload: Function;
                      lastUpload: Function;
                      shouldBackoff: Function;
                      createEvent: Function;
                      on: Function;
                      addListener: Function;
                      addListeners: Function;
                      once: Function;
                      removeListener: Function;
                      removeListeners: Function;
                      removeAllListeners: Function;
                      emit: Function;
                      emitSync: Function;
                      emitEvent: Function;
                      emitEventSync: Function;
                      emitAndWait: Function;
                      emitEventAndWait: Function;
                      proxyEmit: Function;
                      proxyEmitSync: Function;
                      proxyEmitAll: Function;
                      proxyEmitAllSync: Function;
                      onAddListener: Function;
                      onRemoveListener: Function;
                    };
                  };
                  useOptimizedESS2NA: boolean;
                  sendESStats: Function;
                  flush: Function;
                  storageManager: {
                    currentTotalSizeForEvents: number;
                    currentTotalSizeForDroppedCounters: number;
                    maxStorageCapacityForEventsInBytes: number;
                    maxStorageCapacityForDroppedCountersInBytes: number;
                    storageKeyPrefix: string;
                    storage: {
                      maxCapacityInBytes: number;
                      adapter: {
                        setItem: Function;
                        getItem: Function;
                        removeItem: Function;
                        clear: Function;
                        getKeys: Function;
                      };
                      flushStrategy: {
                        kind: string;
                        interval: number;
                      };
                      maxCapacityForDroppedInPercentage: number;
                    };
                    configureMaxStorageCapacity: Function;
                    setTotalEventStorageSizeAtStartup: Function;
                    setTotalDroppedCountersStorageSizeAtStartup: Function;
                    createStorage: Function;
                    getItemSizeInBytes: Function;
                    canMakeEventsStorageFull: Function;
                    canMakeDroppedCountersStorageFull: Function;
                    getOrCreateId: Function;
                    updateItemInEventsStorage: Function;
                    updateItemInDroppedCountersStorage: Function;
                    addItemInEventsStorage: Function;
                    addItemInDroppedCountersStorage: Function;
                    setItem: Function;
                    getItem: Function;
                    removeItemInEventsStorage: Function;
                    removeItemInDroppedCountersStorage: Function;
                    getKeys: Function;
                    clear: Function;
                    setCounterItem: Function;
                  };
                  droppedEventsTracker: {
                    storageManager: {
                      currentTotalSizeForEvents: number;
                      currentTotalSizeForDroppedCounters: number;
                      maxStorageCapacityForEventsInBytes: number;
                      maxStorageCapacityForDroppedCountersInBytes: number;
                      storageKeyPrefix: string;
                      storage: {
                        maxCapacityInBytes: number;
                        adapter: {
                          setItem: Function;
                          getItem: Function;
                          removeItem: Function;
                          clear: Function;
                          getKeys: Function;
                        };
                        flushStrategy: {
                          kind: string;
                          interval: number;
                        };
                        maxCapacityForDroppedInPercentage: number;
                      };
                      configureMaxStorageCapacity: Function;
                      setTotalEventStorageSizeAtStartup: Function;
                      setTotalDroppedCountersStorageSizeAtStartup: Function;
                      createStorage: Function;
                      getItemSizeInBytes: Function;
                      canMakeEventsStorageFull: Function;
                      canMakeDroppedCountersStorageFull: Function;
                      getOrCreateId: Function;
                      updateItemInEventsStorage: Function;
                      updateItemInDroppedCountersStorage: Function;
                      addItemInEventsStorage: Function;
                      addItemInDroppedCountersStorage: Function;
                      setItem: Function;
                      getItem: Function;
                      removeItemInEventsStorage: Function;
                      removeItemInDroppedCountersStorage: Function;
                      getKeys: Function;
                      clear: Function;
                      setCounterItem: Function;
                    };
                    updateDroppedEventCount: Function;
                    getDroppedEventCounters: Function;
                    getDroppedEventsCountersPerSequenceId: Function;
                    updateReportedEventCounters: Function;
                  };
                  eventsManager: {
                    storageManager: {
                      currentTotalSizeForEvents: number;
                      currentTotalSizeForDroppedCounters: number;
                      maxStorageCapacityForEventsInBytes: number;
                      maxStorageCapacityForDroppedCountersInBytes: number;
                      storageKeyPrefix: string;
                      storage: {
                        maxCapacityInBytes: number;
                        adapter: {
                          setItem: Function;
                          getItem: Function;
                          removeItem: Function;
                          clear: Function;
                          getKeys: Function;
                        };
                        flushStrategy: {
                          kind: string;
                          interval: number;
                        };
                        maxCapacityForDroppedInPercentage: number;
                      };
                      configureMaxStorageCapacity: Function;
                      setTotalEventStorageSizeAtStartup: Function;
                      setTotalDroppedCountersStorageSizeAtStartup: Function;
                      createStorage: Function;
                      getItemSizeInBytes: Function;
                      canMakeEventsStorageFull: Function;
                      canMakeDroppedCountersStorageFull: Function;
                      getOrCreateId: Function;
                      updateItemInEventsStorage: Function;
                      updateItemInDroppedCountersStorage: Function;
                      addItemInEventsStorage: Function;
                      addItemInDroppedCountersStorage: Function;
                      setItem: Function;
                      getItem: Function;
                      removeItemInEventsStorage: Function;
                      removeItemInDroppedCountersStorage: Function;
                      getKeys: Function;
                      clear: Function;
                      setCounterItem: Function;
                    };
                    getEvent: Function;
                    getEventKey: Function;
                    getGlobalSequenceNumberFromEventKey: Function;
                    addEvent: Function;
                    getEventsKeys: Function;
                    getEvents: Function;
                    getEventsKeysPerSequenceId: Function;
                    removeEvents: Function;
                  };
                  installationId: string;
                  sequenceIdProvider: {
                    installationId: string;
                    getIdHash: Function;
                    getId: Function;
                  };
                  sequenceNumberProvider: {
                    storageManager: {
                      currentTotalSizeForEvents: number;
                      currentTotalSizeForDroppedCounters: number;
                      maxStorageCapacityForEventsInBytes: number;
                      maxStorageCapacityForDroppedCountersInBytes: number;
                      storageKeyPrefix: string;
                      storage: {
                        maxCapacityInBytes: number;
                        adapter: {
                          setItem: Function;
                          getItem: Function;
                          removeItem: Function;
                          clear: Function;
                          getKeys: Function;
                        };
                        flushStrategy: {
                          kind: string;
                          interval: number;
                        };
                        maxCapacityForDroppedInPercentage: number;
                      };
                      configureMaxStorageCapacity: Function;
                      setTotalEventStorageSizeAtStartup: Function;
                      setTotalDroppedCountersStorageSizeAtStartup: Function;
                      createStorage: Function;
                      getItemSizeInBytes: Function;
                      canMakeEventsStorageFull: Function;
                      canMakeDroppedCountersStorageFull: Function;
                      getOrCreateId: Function;
                      updateItemInEventsStorage: Function;
                      updateItemInDroppedCountersStorage: Function;
                      addItemInEventsStorage: Function;
                      addItemInDroppedCountersStorage: Function;
                      setItem: Function;
                      getItem: Function;
                      removeItemInEventsStorage: Function;
                      removeItemInDroppedCountersStorage: Function;
                      getKeys: Function;
                      clear: Function;
                      setCounterItem: Function;
                    };
                    commitSequenceNumber: Function;
                    getNextSequenceNumber: Function;
                    generateNextSequenceNumber: Function;
                    generateNextEventSequenceNumber: Function;
                    generateNextGlobalSequenceNumber: Function;
                    getEventsSequenceNumbers: Function;
                    getSequenceNumbersPerSequenceId: Function;
                  };
                  statsProvider: {
                    getInitialESSData: Function;
                    addEventsToESSData: Function;
                    addLossStatsData: Function;
                    addDroppedEventsCountersData: Function;
                    addDroppedEventsCounters: Function;
                    provideEventSenderStats: Function;
                  };
                  initSendingEvents: Function;
                  initializeContexts: Function;
                  buildEvent: Function;
                  getSpecificContext: Function;
                  setupInstallationId: Function;
                  getStorageId: Function;
                  onBeforeDisconnect: Function;
                  lastFlush: Function;
                  sendEvents: Function;
                  sendESS2NAWithOptimization: Function;
                  commitAndUploadESStats: Function;
                  onSuccessfullySentESStats: Function;
                  sendToGabito: Function;
                  getEvents: Function;
                  storeEvent: Function;
                  validateEventData: Function;
                  send: Function;
                  hasContext: Function;
                  destroy: Function;
                  getStorageType: Function;
                  isUsingESS2NAOptimization: Function;
                  getVersion: Function;
                  finalFlush: Function;
                  createEvent: Function;
                  on: Function;
                  addListener: Function;
                  addListeners: Function;
                  once: Function;
                  removeListener: Function;
                  removeListeners: Function;
                  removeAllListeners: Function;
                  emit: Function;
                  emitSync: Function;
                  emitEvent: Function;
                  emitEventSync: Function;
                  emitAndWait: Function;
                  emitEventAndWait: Function;
                  proxyEmit: Function;
                  proxyEmitSync: Function;
                  proxyEmitAll: Function;
                  proxyEmitAllSync: Function;
                  onAddListener: Function;
                  onRemoveListener: Function;
                };
                history: {
                  action: string;
                  location: {
                    pathname: string;
                    search: string;
                    hash: string;
                    state: {
                      navigationalRoot: string;
                    };
                    key: string;
                  };
                  index: number;
                  createHref: Function;
                  replace: Function;
                  go: Function;
                  goBack: Function;
                  goForward: Function;
                  canGo: Function;
                  block: Function;
                  listen: Function;
                };
                offlineObserver: {
                  isOnline: boolean;
                  getOnlineStatus: Function;
                };
                enableLeaderboard: Function;
                setLeaderboardElement: Function;
                onNavigationChanged: Function;
                enableLeaderboardMessageHandler: Function;
                disableLeaderboardMessageHandler: Function;
                logLeaderboardEvent: Function;
                requestConfig: Function;
                requestSlot: Function;
                fetchAndDisplayLeaderboard: Function;
                adToLeaderboard: Function;
                isPreviewServiceAd: Function;
                renderLeaderboard: Function;
                adFrameLoaded: Function;
                disableLeaderboard: Function;
                handleBadLeaderboard: Function;
                onFocusChanged: Function;
                refreshLeaderboard: Function;
                setCurrentAd: Function;
                getCurrentAd: Function;
                clearCurrentAd: Function;
              };
              setRefreshDelegate: Function;
              onViewLoaded: Function;
              onViewUnloaded: Function;
              onLeaderboardEnabled: Function;
              onLeaderboardDisabled: Function;
              onNavigationChanged: Function;
              onlineStateChanged: Function;
              onFocusChanged: Function;
              updateViewTimer: Function;
              isPastViewThreshold: Function;
              notifyRefreshIfPossible: Function;
              startRefreshTimer: Function;
              triggerRefresh: Function;
            };
            leaderboardWrapper: any;
            eventSender: {
              instanceContexts: {
                context_application_desktop: {
                  version_code: number;
                  version_string: string;
                };
                context_client_id: {
                  value: string;
                };
                context_installation_id: {
                  value: string;
                };
                context_device_desktop: {
                  device_id: string;
                  device_manufacturer: string;
                  device_model: string;
                  os_version: string;
                  platform_type: string;
                };
              };
              uploadingInProgress: boolean;
              transport: {
                authenticate: Function;
                isConnected: Function;
                isAuthenticated: Function;
                isReconnecting: Function;
                isOnline: Function;
                connect: Function;
                disconnect: Function;
                forceDisconnect: Function;
                forceTokenRefresh: Function;
                getInitTime: Function;
                getEndpoints: Function;
                getLastToken: Function;
                toPublic: Function;
                hasOwnerRef: Function;
                appendTokenQuery: Function;
                appendLastTokenQuery: Function;
                matchMessages: Function;
                unmatchMessages: Function;
                handlePushRequests: Function;
                unhandlePushRequests: Function;
                request: Function;
                addPlugin: Function;
                removePlugin: Function;
                hasPlugin: Function;
                getPluginAPI: Function;
                getConnectionId: Function;
                removeAllListeners: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
              ownerProvider: Function;
              uploaders: {
                authorized: {
                  upload: Function;
                  lastUpload: Function;
                  shouldBackoff: Function;
                  createEvent: Function;
                  on: Function;
                  addListener: Function;
                  addListeners: Function;
                  once: Function;
                  removeListener: Function;
                  removeListeners: Function;
                  removeAllListeners: Function;
                  emit: Function;
                  emitSync: Function;
                  emitEvent: Function;
                  emitEventSync: Function;
                  emitAndWait: Function;
                  emitEventAndWait: Function;
                  proxyEmit: Function;
                  proxyEmitSync: Function;
                  proxyEmitAll: Function;
                  proxyEmitAllSync: Function;
                  onAddListener: Function;
                  onRemoveListener: Function;
                };
                unauthorized: {
                  upload: Function;
                  lastUpload: Function;
                  shouldBackoff: Function;
                  createEvent: Function;
                  on: Function;
                  addListener: Function;
                  addListeners: Function;
                  once: Function;
                  removeListener: Function;
                  removeListeners: Function;
                  removeAllListeners: Function;
                  emit: Function;
                  emitSync: Function;
                  emitEvent: Function;
                  emitEventSync: Function;
                  emitAndWait: Function;
                  emitEventAndWait: Function;
                  proxyEmit: Function;
                  proxyEmitSync: Function;
                  proxyEmitAll: Function;
                  proxyEmitAllSync: Function;
                  onAddListener: Function;
                  onRemoveListener: Function;
                };
              };
              useOptimizedESS2NA: boolean;
              sendESStats: Function;
              flush: Function;
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              droppedEventsTracker: {
                storageManager: {
                  currentTotalSizeForEvents: number;
                  currentTotalSizeForDroppedCounters: number;
                  maxStorageCapacityForEventsInBytes: number;
                  maxStorageCapacityForDroppedCountersInBytes: number;
                  storageKeyPrefix: string;
                  storage: {
                    maxCapacityInBytes: number;
                    adapter: {
                      setItem: Function;
                      getItem: Function;
                      removeItem: Function;
                      clear: Function;
                      getKeys: Function;
                    };
                    flushStrategy: {
                      kind: string;
                      interval: number;
                    };
                    maxCapacityForDroppedInPercentage: number;
                  };
                  configureMaxStorageCapacity: Function;
                  setTotalEventStorageSizeAtStartup: Function;
                  setTotalDroppedCountersStorageSizeAtStartup: Function;
                  createStorage: Function;
                  getItemSizeInBytes: Function;
                  canMakeEventsStorageFull: Function;
                  canMakeDroppedCountersStorageFull: Function;
                  getOrCreateId: Function;
                  updateItemInEventsStorage: Function;
                  updateItemInDroppedCountersStorage: Function;
                  addItemInEventsStorage: Function;
                  addItemInDroppedCountersStorage: Function;
                  setItem: Function;
                  getItem: Function;
                  removeItemInEventsStorage: Function;
                  removeItemInDroppedCountersStorage: Function;
                  getKeys: Function;
                  clear: Function;
                  setCounterItem: Function;
                };
                updateDroppedEventCount: Function;
                getDroppedEventCounters: Function;
                getDroppedEventsCountersPerSequenceId: Function;
                updateReportedEventCounters: Function;
              };
              eventsManager: {
                storageManager: {
                  currentTotalSizeForEvents: number;
                  currentTotalSizeForDroppedCounters: number;
                  maxStorageCapacityForEventsInBytes: number;
                  maxStorageCapacityForDroppedCountersInBytes: number;
                  storageKeyPrefix: string;
                  storage: {
                    maxCapacityInBytes: number;
                    adapter: {
                      setItem: Function;
                      getItem: Function;
                      removeItem: Function;
                      clear: Function;
                      getKeys: Function;
                    };
                    flushStrategy: {
                      kind: string;
                      interval: number;
                    };
                    maxCapacityForDroppedInPercentage: number;
                  };
                  configureMaxStorageCapacity: Function;
                  setTotalEventStorageSizeAtStartup: Function;
                  setTotalDroppedCountersStorageSizeAtStartup: Function;
                  createStorage: Function;
                  getItemSizeInBytes: Function;
                  canMakeEventsStorageFull: Function;
                  canMakeDroppedCountersStorageFull: Function;
                  getOrCreateId: Function;
                  updateItemInEventsStorage: Function;
                  updateItemInDroppedCountersStorage: Function;
                  addItemInEventsStorage: Function;
                  addItemInDroppedCountersStorage: Function;
                  setItem: Function;
                  getItem: Function;
                  removeItemInEventsStorage: Function;
                  removeItemInDroppedCountersStorage: Function;
                  getKeys: Function;
                  clear: Function;
                  setCounterItem: Function;
                };
                getEvent: Function;
                getEventKey: Function;
                getGlobalSequenceNumberFromEventKey: Function;
                addEvent: Function;
                getEventsKeys: Function;
                getEvents: Function;
                getEventsKeysPerSequenceId: Function;
                removeEvents: Function;
              };
              installationId: string;
              sequenceIdProvider: {
                installationId: string;
                getIdHash: Function;
                getId: Function;
              };
              sequenceNumberProvider: {
                storageManager: {
                  currentTotalSizeForEvents: number;
                  currentTotalSizeForDroppedCounters: number;
                  maxStorageCapacityForEventsInBytes: number;
                  maxStorageCapacityForDroppedCountersInBytes: number;
                  storageKeyPrefix: string;
                  storage: {
                    maxCapacityInBytes: number;
                    adapter: {
                      setItem: Function;
                      getItem: Function;
                      removeItem: Function;
                      clear: Function;
                      getKeys: Function;
                    };
                    flushStrategy: {
                      kind: string;
                      interval: number;
                    };
                    maxCapacityForDroppedInPercentage: number;
                  };
                  configureMaxStorageCapacity: Function;
                  setTotalEventStorageSizeAtStartup: Function;
                  setTotalDroppedCountersStorageSizeAtStartup: Function;
                  createStorage: Function;
                  getItemSizeInBytes: Function;
                  canMakeEventsStorageFull: Function;
                  canMakeDroppedCountersStorageFull: Function;
                  getOrCreateId: Function;
                  updateItemInEventsStorage: Function;
                  updateItemInDroppedCountersStorage: Function;
                  addItemInEventsStorage: Function;
                  addItemInDroppedCountersStorage: Function;
                  setItem: Function;
                  getItem: Function;
                  removeItemInEventsStorage: Function;
                  removeItemInDroppedCountersStorage: Function;
                  getKeys: Function;
                  clear: Function;
                  setCounterItem: Function;
                };
                commitSequenceNumber: Function;
                getNextSequenceNumber: Function;
                generateNextSequenceNumber: Function;
                generateNextEventSequenceNumber: Function;
                generateNextGlobalSequenceNumber: Function;
                getEventsSequenceNumbers: Function;
                getSequenceNumbersPerSequenceId: Function;
              };
              statsProvider: {
                getInitialESSData: Function;
                addEventsToESSData: Function;
                addLossStatsData: Function;
                addDroppedEventsCountersData: Function;
                addDroppedEventsCounters: Function;
                provideEventSenderStats: Function;
              };
              initSendingEvents: Function;
              initializeContexts: Function;
              buildEvent: Function;
              getSpecificContext: Function;
              setupInstallationId: Function;
              getStorageId: Function;
              onBeforeDisconnect: Function;
              lastFlush: Function;
              sendEvents: Function;
              sendESS2NAWithOptimization: Function;
              commitAndUploadESStats: Function;
              onSuccessfullySentESStats: Function;
              sendToGabito: Function;
              getEvents: Function;
              storeEvent: Function;
              validateEventData: Function;
              send: Function;
              hasContext: Function;
              destroy: Function;
              getStorageType: Function;
              isUsingESS2NAOptimization: Function;
              getVersion: Function;
              finalFlush: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              removeAllListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            history: {
              action: string;
              location: {
                pathname: string;
                search: string;
                hash: string;
                state: {
                  navigationalRoot: string;
                };
                key: string;
              };
              index: number;
              createHref: Function;
              replace: Function;
              go: Function;
              goBack: Function;
              goForward: Function;
              canGo: Function;
              block: Function;
              listen: Function;
            };
            offlineObserver: {
              isOnline: boolean;
              getOnlineStatus: Function;
            };
            enableLeaderboard: Function;
            setLeaderboardElement: Function;
            onNavigationChanged: Function;
            enableLeaderboardMessageHandler: Function;
            disableLeaderboardMessageHandler: Function;
            logLeaderboardEvent: Function;
            requestConfig: Function;
            requestSlot: Function;
            fetchAndDisplayLeaderboard: Function;
            adToLeaderboard: Function;
            isPreviewServiceAd: Function;
            renderLeaderboard: Function;
            adFrameLoaded: Function;
            disableLeaderboard: Function;
            handleBadLeaderboard: Function;
            onFocusChanged: Function;
            refreshLeaderboard: Function;
            setCurrentAd: Function;
            getCurrentAd: Function;
            clearCurrentAd: Function;
          };
          setRefreshDelegate: Function;
          onViewLoaded: Function;
          onViewUnloaded: Function;
          onLeaderboardEnabled: Function;
          onLeaderboardDisabled: Function;
          onNavigationChanged: Function;
          onlineStateChanged: Function;
          onFocusChanged: Function;
          updateViewTimer: Function;
          isPastViewThreshold: Function;
          notifyRefreshIfPossible: Function;
          startRefreshTimer: Function;
          triggerRefresh: Function;
        };
        leaderboardWrapper: any;
        eventSender: {
          instanceContexts: {
            context_application_desktop: {
              version_code: number;
              version_string: string;
            };
            context_client_id: {
              value: string;
            };
            context_installation_id: {
              value: string;
            };
            context_device_desktop: {
              device_id: string;
              device_manufacturer: string;
              device_model: string;
              os_version: string;
              platform_type: string;
            };
          };
          uploadingInProgress: boolean;
          transport: {
            authenticate: Function;
            isConnected: Function;
            isAuthenticated: Function;
            isReconnecting: Function;
            isOnline: Function;
            connect: Function;
            disconnect: Function;
            forceDisconnect: Function;
            forceTokenRefresh: Function;
            getInitTime: Function;
            getEndpoints: Function;
            getLastToken: Function;
            toPublic: Function;
            hasOwnerRef: Function;
            appendTokenQuery: Function;
            appendLastTokenQuery: Function;
            matchMessages: Function;
            unmatchMessages: Function;
            handlePushRequests: Function;
            unhandlePushRequests: Function;
            request: Function;
            addPlugin: Function;
            removePlugin: Function;
            hasPlugin: Function;
            getPluginAPI: Function;
            getConnectionId: Function;
            removeAllListeners: Function;
            createEvent: Function;
            on: Function;
            addListener: Function;
            addListeners: Function;
            once: Function;
            removeListener: Function;
            removeListeners: Function;
            emit: Function;
            emitSync: Function;
            emitEvent: Function;
            emitEventSync: Function;
            emitAndWait: Function;
            emitEventAndWait: Function;
            proxyEmit: Function;
            proxyEmitSync: Function;
            proxyEmitAll: Function;
            proxyEmitAllSync: Function;
            onAddListener: Function;
            onRemoveListener: Function;
          };
          ownerProvider: Function;
          uploaders: {
            authorized: {
              upload: Function;
              lastUpload: Function;
              shouldBackoff: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              removeAllListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            unauthorized: {
              upload: Function;
              lastUpload: Function;
              shouldBackoff: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              removeAllListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
          };
          useOptimizedESS2NA: boolean;
          sendESStats: Function;
          flush: Function;
          storageManager: {
            currentTotalSizeForEvents: number;
            currentTotalSizeForDroppedCounters: number;
            maxStorageCapacityForEventsInBytes: number;
            maxStorageCapacityForDroppedCountersInBytes: number;
            storageKeyPrefix: string;
            storage: {
              maxCapacityInBytes: number;
              adapter: {
                setItem: Function;
                getItem: Function;
                removeItem: Function;
                clear: Function;
                getKeys: Function;
              };
              flushStrategy: {
                kind: string;
                interval: number;
              };
              maxCapacityForDroppedInPercentage: number;
            };
            configureMaxStorageCapacity: Function;
            setTotalEventStorageSizeAtStartup: Function;
            setTotalDroppedCountersStorageSizeAtStartup: Function;
            createStorage: Function;
            getItemSizeInBytes: Function;
            canMakeEventsStorageFull: Function;
            canMakeDroppedCountersStorageFull: Function;
            getOrCreateId: Function;
            updateItemInEventsStorage: Function;
            updateItemInDroppedCountersStorage: Function;
            addItemInEventsStorage: Function;
            addItemInDroppedCountersStorage: Function;
            setItem: Function;
            getItem: Function;
            removeItemInEventsStorage: Function;
            removeItemInDroppedCountersStorage: Function;
            getKeys: Function;
            clear: Function;
            setCounterItem: Function;
          };
          droppedEventsTracker: {
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            updateDroppedEventCount: Function;
            getDroppedEventCounters: Function;
            getDroppedEventsCountersPerSequenceId: Function;
            updateReportedEventCounters: Function;
          };
          eventsManager: {
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            getEvent: Function;
            getEventKey: Function;
            getGlobalSequenceNumberFromEventKey: Function;
            addEvent: Function;
            getEventsKeys: Function;
            getEvents: Function;
            getEventsKeysPerSequenceId: Function;
            removeEvents: Function;
          };
          installationId: string;
          sequenceIdProvider: {
            installationId: string;
            getIdHash: Function;
            getId: Function;
          };
          sequenceNumberProvider: {
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            commitSequenceNumber: Function;
            getNextSequenceNumber: Function;
            generateNextSequenceNumber: Function;
            generateNextEventSequenceNumber: Function;
            generateNextGlobalSequenceNumber: Function;
            getEventsSequenceNumbers: Function;
            getSequenceNumbersPerSequenceId: Function;
          };
          statsProvider: {
            getInitialESSData: Function;
            addEventsToESSData: Function;
            addLossStatsData: Function;
            addDroppedEventsCountersData: Function;
            addDroppedEventsCounters: Function;
            provideEventSenderStats: Function;
          };
          initSendingEvents: Function;
          initializeContexts: Function;
          buildEvent: Function;
          getSpecificContext: Function;
          setupInstallationId: Function;
          getStorageId: Function;
          onBeforeDisconnect: Function;
          lastFlush: Function;
          sendEvents: Function;
          sendESS2NAWithOptimization: Function;
          commitAndUploadESStats: Function;
          onSuccessfullySentESStats: Function;
          sendToGabito: Function;
          getEvents: Function;
          storeEvent: Function;
          validateEventData: Function;
          send: Function;
          hasContext: Function;
          destroy: Function;
          getStorageType: Function;
          isUsingESS2NAOptimization: Function;
          getVersion: Function;
          finalFlush: Function;
          createEvent: Function;
          on: Function;
          addListener: Function;
          addListeners: Function;
          once: Function;
          removeListener: Function;
          removeListeners: Function;
          removeAllListeners: Function;
          emit: Function;
          emitSync: Function;
          emitEvent: Function;
          emitEventSync: Function;
          emitAndWait: Function;
          emitEventAndWait: Function;
          proxyEmit: Function;
          proxyEmitSync: Function;
          proxyEmitAll: Function;
          proxyEmitAllSync: Function;
          onAddListener: Function;
          onRemoveListener: Function;
        };
        history: {
          action: string;
          location: {
            pathname: string;
            search: string;
            hash: string;
            state: {
              navigationalRoot: string;
            };
            key: string;
          };
          index: number;
          createHref: Function;
          replace: Function;
          go: Function;
          goBack: Function;
          goForward: Function;
          canGo: Function;
          block: Function;
          listen: Function;
        };
        offlineObserver: {
          isOnline: boolean;
          getOnlineStatus: Function;
        };
        enableLeaderboard: Function;
        setLeaderboardElement: Function;
        onNavigationChanged: Function;
        enableLeaderboardMessageHandler: Function;
        disableLeaderboardMessageHandler: Function;
        logLeaderboardEvent: Function;
        requestConfig: Function;
        requestSlot: Function;
        fetchAndDisplayLeaderboard: Function;
        adToLeaderboard: Function;
        isPreviewServiceAd: Function;
        renderLeaderboard: Function;
        adFrameLoaded: Function;
        disableLeaderboard: Function;
        handleBadLeaderboard: Function;
        onFocusChanged: Function;
        refreshLeaderboard: Function;
        setCurrentAd: Function;
        getCurrentAd: Function;
        clearCurrentAd: Function;
      };
      sponsoredPlaylist: {
        enabled: boolean;
        sponsoredPlaylistApi: {
          eventSender: {
            instanceContexts: {
              context_application_desktop: {
                version_code: number;
                version_string: string;
              };
              context_client_id: {
                value: string;
              };
              context_installation_id: {
                value: string;
              };
              context_device_desktop: {
                device_id: string;
                device_manufacturer: string;
                device_model: string;
                os_version: string;
                platform_type: string;
              };
            };
            uploadingInProgress: boolean;
            transport: {
              authenticate: Function;
              isConnected: Function;
              isAuthenticated: Function;
              isReconnecting: Function;
              isOnline: Function;
              connect: Function;
              disconnect: Function;
              forceDisconnect: Function;
              forceTokenRefresh: Function;
              getInitTime: Function;
              getEndpoints: Function;
              getLastToken: Function;
              toPublic: Function;
              hasOwnerRef: Function;
              appendTokenQuery: Function;
              appendLastTokenQuery: Function;
              matchMessages: Function;
              unmatchMessages: Function;
              handlePushRequests: Function;
              unhandlePushRequests: Function;
              request: Function;
              addPlugin: Function;
              removePlugin: Function;
              hasPlugin: Function;
              getPluginAPI: Function;
              getConnectionId: Function;
              removeAllListeners: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            ownerProvider: Function;
            uploaders: {
              authorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
              unauthorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
            };
            useOptimizedESS2NA: boolean;
            sendESStats: Function;
            flush: Function;
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            droppedEventsTracker: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              updateDroppedEventCount: Function;
              getDroppedEventCounters: Function;
              getDroppedEventsCountersPerSequenceId: Function;
              updateReportedEventCounters: Function;
            };
            eventsManager: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              getEvent: Function;
              getEventKey: Function;
              getGlobalSequenceNumberFromEventKey: Function;
              addEvent: Function;
              getEventsKeys: Function;
              getEvents: Function;
              getEventsKeysPerSequenceId: Function;
              removeEvents: Function;
            };
            installationId: string;
            sequenceIdProvider: {
              installationId: string;
              getIdHash: Function;
              getId: Function;
            };
            sequenceNumberProvider: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              commitSequenceNumber: Function;
              getNextSequenceNumber: Function;
              generateNextSequenceNumber: Function;
              generateNextEventSequenceNumber: Function;
              generateNextGlobalSequenceNumber: Function;
              getEventsSequenceNumbers: Function;
              getSequenceNumbersPerSequenceId: Function;
            };
            statsProvider: {
              getInitialESSData: Function;
              addEventsToESSData: Function;
              addLossStatsData: Function;
              addDroppedEventsCountersData: Function;
              addDroppedEventsCounters: Function;
              provideEventSenderStats: Function;
            };
            initSendingEvents: Function;
            initializeContexts: Function;
            buildEvent: Function;
            getSpecificContext: Function;
            setupInstallationId: Function;
            getStorageId: Function;
            onBeforeDisconnect: Function;
            lastFlush: Function;
            sendEvents: Function;
            sendESS2NAWithOptimization: Function;
            commitAndUploadESStats: Function;
            onSuccessfullySentESStats: Function;
            sendToGabito: Function;
            getEvents: Function;
            storeEvent: Function;
            validateEventData: Function;
            send: Function;
            hasContext: Function;
            destroy: Function;
            getStorageType: Function;
            isUsingESS2NAOptimization: Function;
            getVersion: Function;
            finalFlush: Function;
            createEvent: Function;
            on: Function;
            addListener: Function;
            addListeners: Function;
            once: Function;
            removeListener: Function;
            removeListeners: Function;
            removeAllListeners: Function;
            emit: Function;
            emitSync: Function;
            emitEvent: Function;
            emitEventSync: Function;
            emitAndWait: Function;
            emitEventAndWait: Function;
            proxyEmit: Function;
            proxyEmitSync: Function;
            proxyEmitAll: Function;
            proxyEmitAllSync: Function;
            onAddListener: Function;
            onRemoveListener: Function;
          };
          adsCoreConnector: {
            createSlot: Function;
            clearSlot: Function;
            enableSlot: Function;
            getAds: Function;
            fetchSlot: Function;
            getPreviewAd: Function;
            getSlotSettings: Function;
            getSlot: Function;
            increaseStreamTime: Function;
            insertStreamAd: Function;
            overrideCountry: Function;
            putState: Function;
            putTargeting: Function;
            subscribeToProductState: Function;
            subscribeToInStreamAds: Function;
            subscribeToSlot: Function;
            triggerSlot: Function;
            skipToNextWithOverride: Function;
            setRequestHeader: Function;
            removeRequestHeader: Function;
            updateAdServerEndpoint: Function;
            updateAdStateEndpoint: Function;
            subscribeToAdFormat: Function;
            subscribeToState: Function;
            getAdState: Function;
            overridePodcastMetadata: Function;
            logAudioVolume: Function;
          };
          getSponsoredUris: Function;
          getSponsorshipAd: Function;
          subscribeToPreview: Function;
          logEvent: Function;
        };
        enable: Function;
        disable: Function;
        requestSponsoredPlaylists: Function;
        requestSponsoredPlaylistAd: Function;
        logEvent: Function;
      };
      home: {
        logger: {
          eventSender: {
            instanceContexts: {
              context_application_desktop: {
                version_code: number;
                version_string: string;
              };
              context_client_id: {
                value: string;
              };
              context_installation_id: {
                value: string;
              };
              context_device_desktop: {
                device_id: string;
                device_manufacturer: string;
                device_model: string;
                os_version: string;
                platform_type: string;
              };
            };
            uploadingInProgress: boolean;
            transport: {
              authenticate: Function;
              isConnected: Function;
              isAuthenticated: Function;
              isReconnecting: Function;
              isOnline: Function;
              connect: Function;
              disconnect: Function;
              forceDisconnect: Function;
              forceTokenRefresh: Function;
              getInitTime: Function;
              getEndpoints: Function;
              getLastToken: Function;
              toPublic: Function;
              hasOwnerRef: Function;
              appendTokenQuery: Function;
              appendLastTokenQuery: Function;
              matchMessages: Function;
              unmatchMessages: Function;
              handlePushRequests: Function;
              unhandlePushRequests: Function;
              request: Function;
              addPlugin: Function;
              removePlugin: Function;
              hasPlugin: Function;
              getPluginAPI: Function;
              getConnectionId: Function;
              removeAllListeners: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            ownerProvider: Function;
            uploaders: {
              authorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
              unauthorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
            };
            useOptimizedESS2NA: boolean;
            sendESStats: Function;
            flush: Function;
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            droppedEventsTracker: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              updateDroppedEventCount: Function;
              getDroppedEventCounters: Function;
              getDroppedEventsCountersPerSequenceId: Function;
              updateReportedEventCounters: Function;
            };
            eventsManager: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              getEvent: Function;
              getEventKey: Function;
              getGlobalSequenceNumberFromEventKey: Function;
              addEvent: Function;
              getEventsKeys: Function;
              getEvents: Function;
              getEventsKeysPerSequenceId: Function;
              removeEvents: Function;
            };
            installationId: string;
            sequenceIdProvider: {
              installationId: string;
              getIdHash: Function;
              getId: Function;
            };
            sequenceNumberProvider: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              commitSequenceNumber: Function;
              getNextSequenceNumber: Function;
              generateNextSequenceNumber: Function;
              generateNextEventSequenceNumber: Function;
              generateNextGlobalSequenceNumber: Function;
              getEventsSequenceNumbers: Function;
              getSequenceNumbersPerSequenceId: Function;
            };
            statsProvider: {
              getInitialESSData: Function;
              addEventsToESSData: Function;
              addLossStatsData: Function;
              addDroppedEventsCountersData: Function;
              addDroppedEventsCounters: Function;
              provideEventSenderStats: Function;
            };
            initSendingEvents: Function;
            initializeContexts: Function;
            buildEvent: Function;
            getSpecificContext: Function;
            setupInstallationId: Function;
            getStorageId: Function;
            onBeforeDisconnect: Function;
            lastFlush: Function;
            sendEvents: Function;
            sendESS2NAWithOptimization: Function;
            commitAndUploadESStats: Function;
            onSuccessfullySentESStats: Function;
            sendToGabito: Function;
            getEvents: Function;
            storeEvent: Function;
            validateEventData: Function;
            send: Function;
            hasContext: Function;
            destroy: Function;
            getStorageType: Function;
            isUsingESS2NAOptimization: Function;
            getVersion: Function;
            finalFlush: Function;
            createEvent: Function;
            on: Function;
            addListener: Function;
            addListeners: Function;
            once: Function;
            removeListener: Function;
            removeListeners: Function;
            removeAllListeners: Function;
            emit: Function;
            emitSync: Function;
            emitEvent: Function;
            emitEventSync: Function;
            emitAndWait: Function;
            emitEventAndWait: Function;
            proxyEmit: Function;
            proxyEmitSync: Function;
            proxyEmitAll: Function;
            proxyEmitAllSync: Function;
            onAddListener: Function;
            onRemoveListener: Function;
          };
          appStartupId: string;
          fireTrackingEvent: Function;
          log: Function;
        };
        fetchHomeAd: Function;
        enableLegacyHptoContainerLoader: boolean;
      };
      survey: {
        logger: {
          eventSender: {
            instanceContexts: {
              context_application_desktop: {
                version_code: number;
                version_string: string;
              };
              context_client_id: {
                value: string;
              };
              context_installation_id: {
                value: string;
              };
              context_device_desktop: {
                device_id: string;
                device_manufacturer: string;
                device_model: string;
                os_version: string;
                platform_type: string;
              };
            };
            uploadingInProgress: boolean;
            transport: {
              authenticate: Function;
              isConnected: Function;
              isAuthenticated: Function;
              isReconnecting: Function;
              isOnline: Function;
              connect: Function;
              disconnect: Function;
              forceDisconnect: Function;
              forceTokenRefresh: Function;
              getInitTime: Function;
              getEndpoints: Function;
              getLastToken: Function;
              toPublic: Function;
              hasOwnerRef: Function;
              appendTokenQuery: Function;
              appendLastTokenQuery: Function;
              matchMessages: Function;
              unmatchMessages: Function;
              handlePushRequests: Function;
              unhandlePushRequests: Function;
              request: Function;
              addPlugin: Function;
              removePlugin: Function;
              hasPlugin: Function;
              getPluginAPI: Function;
              getConnectionId: Function;
              removeAllListeners: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            ownerProvider: Function;
            uploaders: {
              authorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
              unauthorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
            };
            useOptimizedESS2NA: boolean;
            sendESStats: Function;
            flush: Function;
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            droppedEventsTracker: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              updateDroppedEventCount: Function;
              getDroppedEventCounters: Function;
              getDroppedEventsCountersPerSequenceId: Function;
              updateReportedEventCounters: Function;
            };
            eventsManager: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              getEvent: Function;
              getEventKey: Function;
              getGlobalSequenceNumberFromEventKey: Function;
              addEvent: Function;
              getEventsKeys: Function;
              getEvents: Function;
              getEventsKeysPerSequenceId: Function;
              removeEvents: Function;
            };
            installationId: string;
            sequenceIdProvider: {
              installationId: string;
              getIdHash: Function;
              getId: Function;
            };
            sequenceNumberProvider: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              commitSequenceNumber: Function;
              getNextSequenceNumber: Function;
              generateNextSequenceNumber: Function;
              generateNextEventSequenceNumber: Function;
              generateNextGlobalSequenceNumber: Function;
              getEventsSequenceNumbers: Function;
              getSequenceNumbersPerSequenceId: Function;
            };
            statsProvider: {
              getInitialESSData: Function;
              addEventsToESSData: Function;
              addLossStatsData: Function;
              addDroppedEventsCountersData: Function;
              addDroppedEventsCounters: Function;
              provideEventSenderStats: Function;
            };
            initSendingEvents: Function;
            initializeContexts: Function;
            buildEvent: Function;
            getSpecificContext: Function;
            setupInstallationId: Function;
            getStorageId: Function;
            onBeforeDisconnect: Function;
            lastFlush: Function;
            sendEvents: Function;
            sendESS2NAWithOptimization: Function;
            commitAndUploadESStats: Function;
            onSuccessfullySentESStats: Function;
            sendToGabito: Function;
            getEvents: Function;
            storeEvent: Function;
            validateEventData: Function;
            send: Function;
            hasContext: Function;
            destroy: Function;
            getStorageType: Function;
            isUsingESS2NAOptimization: Function;
            getVersion: Function;
            finalFlush: Function;
            createEvent: Function;
            on: Function;
            addListener: Function;
            addListeners: Function;
            once: Function;
            removeListener: Function;
            removeListeners: Function;
            removeAllListeners: Function;
            emit: Function;
            emitSync: Function;
            emitEvent: Function;
            emitEventSync: Function;
            emitAndWait: Function;
            emitEventAndWait: Function;
            proxyEmit: Function;
            proxyEmitSync: Function;
            proxyEmitAll: Function;
            proxyEmitAllSync: Function;
            onAddListener: Function;
            onRemoveListener: Function;
          };
          inStreamApi: {
            enabled: boolean;
            inStreamAdsSubscription: any;
            inStreamAd: any;
            onAdMessageCallbacks: any;
            adsCoreConnector: {
              createSlot: Function;
              clearSlot: Function;
              enableSlot: Function;
              getAds: Function;
              fetchSlot: Function;
              getPreviewAd: Function;
              getSlotSettings: Function;
              getSlot: Function;
              increaseStreamTime: Function;
              insertStreamAd: Function;
              overrideCountry: Function;
              putState: Function;
              putTargeting: Function;
              subscribeToProductState: Function;
              subscribeToInStreamAds: Function;
              subscribeToSlot: Function;
              triggerSlot: Function;
              skipToNextWithOverride: Function;
              setRequestHeader: Function;
              removeRequestHeader: Function;
              updateAdServerEndpoint: Function;
              updateAdStateEndpoint: Function;
              subscribeToAdFormat: Function;
              subscribeToState: Function;
              getAdState: Function;
              overridePodcastMetadata: Function;
              logAudioVolume: Function;
            };
            enable: Function;
            disable: Function;
            subscribeToInStreamAds: Function;
            getInStreamAd: Function;
            onInStreamAdMessage: Function;
            skipToNext: Function;
          };
          getAdData: Function;
          logAdEvent: Function;
          logSurveyAdEventWithAd: Function;
          logSurveyAdEventWithoutAd: Function;
          logAdError: Function;
        };
      };
      inStreamApi: {
        enabled: boolean;
        inStreamAdsSubscription: any;
        inStreamAd: any;
        onAdMessageCallbacks: any;
        adsCoreConnector: {
          createSlot: Function;
          clearSlot: Function;
          enableSlot: Function;
          getAds: Function;
          fetchSlot: Function;
          getPreviewAd: Function;
          getSlotSettings: Function;
          getSlot: Function;
          increaseStreamTime: Function;
          insertStreamAd: Function;
          overrideCountry: Function;
          putState: Function;
          putTargeting: Function;
          subscribeToProductState: Function;
          subscribeToInStreamAds: Function;
          subscribeToSlot: Function;
          triggerSlot: Function;
          skipToNextWithOverride: Function;
          setRequestHeader: Function;
          removeRequestHeader: Function;
          updateAdServerEndpoint: Function;
          updateAdStateEndpoint: Function;
          subscribeToAdFormat: Function;
          subscribeToState: Function;
          getAdState: Function;
          overridePodcastMetadata: Function;
          logAudioVolume: Function;
        };
        enable: Function;
        disable: Function;
        subscribeToInStreamAds: Function;
        getInStreamAd: Function;
        onInStreamAdMessage: Function;
        skipToNext: Function;
      };
      adStateReporter: {
        focusState: {
          listeners: any;
          addFocusListener: Function;
          removeFocusListener: Function;
          removeAllFocusListeners: Function;
          hasFocus: Function;
        };
        setAdStateKey: Function;
        history: {
          action: string;
          location: {
            pathname: string;
            search: string;
            hash: string;
            state: {
              navigationalRoot: string;
            };
            key: string;
          };
          index: number;
          createHref: Function;
          replace: Function;
          go: Function;
          goBack: Function;
          goForward: Function;
          canGo: Function;
          block: Function;
          listen: Function;
        };
        onFocusChanged: Function;
      };
    };
    RemoteConfiguration: {
      accessListeners: {
        has: Function;
        add: Function;
        delete: Function;
        clear: Function;
        union: Function;
        intersection: Function;
        difference: Function;
        symmetricDifference: Function;
        isSubsetOf: Function;
        isSupersetOf: Function;
        isDisjointFrom: Function;
      };
      getValue: Function;
      toJSON: Function;
      toBuilder: Function;
    };
    RemoteConfigurationWithLocalOverrides: {
      accessListeners: {
        has: Function;
        add: Function;
        delete: Function;
        clear: Function;
        union: Function;
        intersection: Function;
        difference: Function;
        symmetricDifference: Function;
        isSubsetOf: Function;
        isSupersetOf: Function;
        isDisjointFrom: Function;
      };
      getValue: Function;
      toJSON: Function;
      toBuilder: Function;
    };
    GraphQLLoader: Function;
    PlatformData: {
      remote_config_client_id: string;
      os_name: string;
      os_version: string;
      os_settings: {
        scroller_style: string;
        double_click_interval_ms: number;
      };
      app_platform: string;
      client_name: string;
      client_version_triple: string;
      client_version_quadruple: string;
      client_version_quintuple: string;
      client_capabilities: {
        can_autostart: boolean;
        can_restart: boolean;
        can_show_track_notifications: boolean;
        can_show_system_media_controls: boolean;
        can_minimize_or_exit_on_close: boolean;
      };
      event_sender_context_information: {
        device_id: string;
        device_manufacturer: string;
        device_model: string;
        platform_type: string;
        os_version: string;
        installation_id: string;
        client_id: string;
        client_version_string: string;
        client_version_int: number;
      };
      is_developer_mode: boolean;
    };
    SEOExperiments: any;
    SingAlongAPI: {
      karaokeServiceClient: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        postVocalVolume: Function;
        postStatus: Function;
        getStatus: Function;
        subscribeToEvents: Function;
      };
      getCapabilities: Function;
      setVocalVolume: Function;
      setStatus: Function;
      getStatus: Function;
    };
    UBILogger: {
      formatUiNavigateEvent: Function;
      ubiLogger: {
        eventSender: {
          instanceContexts: {
            context_application_desktop: {
              version_code: number;
              version_string: string;
            };
            context_client_id: {
              value: string;
            };
            context_installation_id: {
              value: string;
            };
            context_device_desktop: {
              device_id: string;
              device_manufacturer: string;
              device_model: string;
              os_version: string;
              platform_type: string;
            };
          };
          uploadingInProgress: boolean;
          transport: {
            authenticate: Function;
            isConnected: Function;
            isAuthenticated: Function;
            isReconnecting: Function;
            isOnline: Function;
            connect: Function;
            disconnect: Function;
            forceDisconnect: Function;
            forceTokenRefresh: Function;
            getInitTime: Function;
            getEndpoints: Function;
            getLastToken: Function;
            toPublic: Function;
            hasOwnerRef: Function;
            appendTokenQuery: Function;
            appendLastTokenQuery: Function;
            matchMessages: Function;
            unmatchMessages: Function;
            handlePushRequests: Function;
            unhandlePushRequests: Function;
            request: Function;
            addPlugin: Function;
            removePlugin: Function;
            hasPlugin: Function;
            getPluginAPI: Function;
            getConnectionId: Function;
            removeAllListeners: Function;
            createEvent: Function;
            on: Function;
            addListener: Function;
            addListeners: Function;
            once: Function;
            removeListener: Function;
            removeListeners: Function;
            emit: Function;
            emitSync: Function;
            emitEvent: Function;
            emitEventSync: Function;
            emitAndWait: Function;
            emitEventAndWait: Function;
            proxyEmit: Function;
            proxyEmitSync: Function;
            proxyEmitAll: Function;
            proxyEmitAllSync: Function;
            onAddListener: Function;
            onRemoveListener: Function;
          };
          ownerProvider: Function;
          uploaders: {
            authorized: {
              upload: Function;
              lastUpload: Function;
              shouldBackoff: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              removeAllListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            unauthorized: {
              upload: Function;
              lastUpload: Function;
              shouldBackoff: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              removeAllListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
          };
          useOptimizedESS2NA: boolean;
          sendESStats: Function;
          flush: Function;
          storageManager: {
            currentTotalSizeForEvents: number;
            currentTotalSizeForDroppedCounters: number;
            maxStorageCapacityForEventsInBytes: number;
            maxStorageCapacityForDroppedCountersInBytes: number;
            storageKeyPrefix: string;
            storage: {
              maxCapacityInBytes: number;
              adapter: {
                setItem: Function;
                getItem: Function;
                removeItem: Function;
                clear: Function;
                getKeys: Function;
              };
              flushStrategy: {
                kind: string;
                interval: number;
              };
              maxCapacityForDroppedInPercentage: number;
            };
            configureMaxStorageCapacity: Function;
            setTotalEventStorageSizeAtStartup: Function;
            setTotalDroppedCountersStorageSizeAtStartup: Function;
            createStorage: Function;
            getItemSizeInBytes: Function;
            canMakeEventsStorageFull: Function;
            canMakeDroppedCountersStorageFull: Function;
            getOrCreateId: Function;
            updateItemInEventsStorage: Function;
            updateItemInDroppedCountersStorage: Function;
            addItemInEventsStorage: Function;
            addItemInDroppedCountersStorage: Function;
            setItem: Function;
            getItem: Function;
            removeItemInEventsStorage: Function;
            removeItemInDroppedCountersStorage: Function;
            getKeys: Function;
            clear: Function;
            setCounterItem: Function;
          };
          droppedEventsTracker: {
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            updateDroppedEventCount: Function;
            getDroppedEventCounters: Function;
            getDroppedEventsCountersPerSequenceId: Function;
            updateReportedEventCounters: Function;
          };
          eventsManager: {
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            getEvent: Function;
            getEventKey: Function;
            getGlobalSequenceNumberFromEventKey: Function;
            addEvent: Function;
            getEventsKeys: Function;
            getEvents: Function;
            getEventsKeysPerSequenceId: Function;
            removeEvents: Function;
          };
          installationId: string;
          sequenceIdProvider: {
            installationId: string;
            getIdHash: Function;
            getId: Function;
          };
          sequenceNumberProvider: {
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            commitSequenceNumber: Function;
            getNextSequenceNumber: Function;
            generateNextSequenceNumber: Function;
            generateNextEventSequenceNumber: Function;
            generateNextGlobalSequenceNumber: Function;
            getEventsSequenceNumbers: Function;
            getSequenceNumbersPerSequenceId: Function;
          };
          statsProvider: {
            getInitialESSData: Function;
            addEventsToESSData: Function;
            addLossStatsData: Function;
            addDroppedEventsCountersData: Function;
            addDroppedEventsCounters: Function;
            provideEventSenderStats: Function;
          };
          initSendingEvents: Function;
          initializeContexts: Function;
          buildEvent: Function;
          getSpecificContext: Function;
          setupInstallationId: Function;
          getStorageId: Function;
          onBeforeDisconnect: Function;
          lastFlush: Function;
          sendEvents: Function;
          sendESS2NAWithOptimization: Function;
          commitAndUploadESStats: Function;
          onSuccessfullySentESStats: Function;
          sendToGabito: Function;
          getEvents: Function;
          storeEvent: Function;
          validateEventData: Function;
          send: Function;
          hasContext: Function;
          destroy: Function;
          getStorageType: Function;
          isUsingESS2NAOptimization: Function;
          getVersion: Function;
          finalFlush: Function;
          createEvent: Function;
          on: Function;
          addListener: Function;
          addListeners: Function;
          once: Function;
          removeListener: Function;
          removeListeners: Function;
          removeAllListeners: Function;
          emit: Function;
          emitSync: Function;
          emitEvent: Function;
          emitEventSync: Function;
          emitAndWait: Function;
          emitEventAndWait: Function;
          proxyEmit: Function;
          proxyEmitSync: Function;
          proxyEmitAll: Function;
          proxyEmitAllSync: Function;
          onAddListener: Function;
          onRemoveListener: Function;
        };
        disableAutoBackgroundMonitoring: boolean;
        storageManager: {
          storageAdapter: {
            items: {
              get: Function;
              set: Function;
              has: Function;
              delete: Function;
              clear: Function;
            };
            setItem: Function;
            getItem: Function;
            removeItem: Function;
            clear: Function;
          };
          getItem: Function;
          setItem: Function;
          removeItem: Function;
          clear: Function;
          getStorageType: Function;
        };
        authenticationProvider: {
          isAuthenticated: Function;
        };
        pageInfoProvider: {
          storageManager: {
            storageAdapter: {
              items: {
                get: Function;
                set: Function;
                has: Function;
                delete: Function;
                clear: Function;
              };
              setItem: Function;
              getItem: Function;
              removeItem: Function;
              clear: Function;
            };
            getItem: Function;
            setItem: Function;
            removeItem: Function;
            clear: Function;
            getStorageType: Function;
          };
          getPageInfo: Function;
          getPageId: Function;
          getPageInstanceId: Function;
          getPageUri: Function;
          getNavigationalRoot: Function;
          setPageInfo: Function;
        };
        contextualProviders: {
          playContextUriProvider: {
            getPlayContextUri: Function;
          };
          playbackIdProvider: {
            getPlaybackId: Function;
          };
        };
        pageViewLogger: {
          onVisibilityChange: Function;
          onBlur: Function;
          onFocus: Function;
          eventSender: {
            instanceContexts: {
              context_application_desktop: {
                version_code: number;
                version_string: string;
              };
              context_client_id: {
                value: string;
              };
              context_installation_id: {
                value: string;
              };
              context_device_desktop: {
                device_id: string;
                device_manufacturer: string;
                device_model: string;
                os_version: string;
                platform_type: string;
              };
            };
            uploadingInProgress: boolean;
            transport: {
              authenticate: Function;
              isConnected: Function;
              isAuthenticated: Function;
              isReconnecting: Function;
              isOnline: Function;
              connect: Function;
              disconnect: Function;
              forceDisconnect: Function;
              forceTokenRefresh: Function;
              getInitTime: Function;
              getEndpoints: Function;
              getLastToken: Function;
              toPublic: Function;
              hasOwnerRef: Function;
              appendTokenQuery: Function;
              appendLastTokenQuery: Function;
              matchMessages: Function;
              unmatchMessages: Function;
              handlePushRequests: Function;
              unhandlePushRequests: Function;
              request: Function;
              addPlugin: Function;
              removePlugin: Function;
              hasPlugin: Function;
              getPluginAPI: Function;
              getConnectionId: Function;
              removeAllListeners: Function;
              createEvent: Function;
              on: Function;
              addListener: Function;
              addListeners: Function;
              once: Function;
              removeListener: Function;
              removeListeners: Function;
              emit: Function;
              emitSync: Function;
              emitEvent: Function;
              emitEventSync: Function;
              emitAndWait: Function;
              emitEventAndWait: Function;
              proxyEmit: Function;
              proxyEmitSync: Function;
              proxyEmitAll: Function;
              proxyEmitAllSync: Function;
              onAddListener: Function;
              onRemoveListener: Function;
            };
            ownerProvider: Function;
            uploaders: {
              authorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
              unauthorized: {
                upload: Function;
                lastUpload: Function;
                shouldBackoff: Function;
                createEvent: Function;
                on: Function;
                addListener: Function;
                addListeners: Function;
                once: Function;
                removeListener: Function;
                removeListeners: Function;
                removeAllListeners: Function;
                emit: Function;
                emitSync: Function;
                emitEvent: Function;
                emitEventSync: Function;
                emitAndWait: Function;
                emitEventAndWait: Function;
                proxyEmit: Function;
                proxyEmitSync: Function;
                proxyEmitAll: Function;
                proxyEmitAllSync: Function;
                onAddListener: Function;
                onRemoveListener: Function;
              };
            };
            useOptimizedESS2NA: boolean;
            sendESStats: Function;
            flush: Function;
            storageManager: {
              currentTotalSizeForEvents: number;
              currentTotalSizeForDroppedCounters: number;
              maxStorageCapacityForEventsInBytes: number;
              maxStorageCapacityForDroppedCountersInBytes: number;
              storageKeyPrefix: string;
              storage: {
                maxCapacityInBytes: number;
                adapter: {
                  setItem: Function;
                  getItem: Function;
                  removeItem: Function;
                  clear: Function;
                  getKeys: Function;
                };
                flushStrategy: {
                  kind: string;
                  interval: number;
                };
                maxCapacityForDroppedInPercentage: number;
              };
              configureMaxStorageCapacity: Function;
              setTotalEventStorageSizeAtStartup: Function;
              setTotalDroppedCountersStorageSizeAtStartup: Function;
              createStorage: Function;
              getItemSizeInBytes: Function;
              canMakeEventsStorageFull: Function;
              canMakeDroppedCountersStorageFull: Function;
              getOrCreateId: Function;
              updateItemInEventsStorage: Function;
              updateItemInDroppedCountersStorage: Function;
              addItemInEventsStorage: Function;
              addItemInDroppedCountersStorage: Function;
              setItem: Function;
              getItem: Function;
              removeItemInEventsStorage: Function;
              removeItemInDroppedCountersStorage: Function;
              getKeys: Function;
              clear: Function;
              setCounterItem: Function;
            };
            droppedEventsTracker: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              updateDroppedEventCount: Function;
              getDroppedEventCounters: Function;
              getDroppedEventsCountersPerSequenceId: Function;
              updateReportedEventCounters: Function;
            };
            eventsManager: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              getEvent: Function;
              getEventKey: Function;
              getGlobalSequenceNumberFromEventKey: Function;
              addEvent: Function;
              getEventsKeys: Function;
              getEvents: Function;
              getEventsKeysPerSequenceId: Function;
              removeEvents: Function;
            };
            installationId: string;
            sequenceIdProvider: {
              installationId: string;
              getIdHash: Function;
              getId: Function;
            };
            sequenceNumberProvider: {
              storageManager: {
                currentTotalSizeForEvents: number;
                currentTotalSizeForDroppedCounters: number;
                maxStorageCapacityForEventsInBytes: number;
                maxStorageCapacityForDroppedCountersInBytes: number;
                storageKeyPrefix: string;
                storage: {
                  maxCapacityInBytes: number;
                  adapter: {
                    setItem: Function;
                    getItem: Function;
                    removeItem: Function;
                    clear: Function;
                    getKeys: Function;
                  };
                  flushStrategy: {
                    kind: string;
                    interval: number;
                  };
                  maxCapacityForDroppedInPercentage: number;
                };
                configureMaxStorageCapacity: Function;
                setTotalEventStorageSizeAtStartup: Function;
                setTotalDroppedCountersStorageSizeAtStartup: Function;
                createStorage: Function;
                getItemSizeInBytes: Function;
                canMakeEventsStorageFull: Function;
                canMakeDroppedCountersStorageFull: Function;
                getOrCreateId: Function;
                updateItemInEventsStorage: Function;
                updateItemInDroppedCountersStorage: Function;
                addItemInEventsStorage: Function;
                addItemInDroppedCountersStorage: Function;
                setItem: Function;
                getItem: Function;
                removeItemInEventsStorage: Function;
                removeItemInDroppedCountersStorage: Function;
                getKeys: Function;
                clear: Function;
                setCounterItem: Function;
              };
              commitSequenceNumber: Function;
              getNextSequenceNumber: Function;
              generateNextSequenceNumber: Function;
              generateNextEventSequenceNumber: Function;
              generateNextGlobalSequenceNumber: Function;
              getEventsSequenceNumbers: Function;
              getSequenceNumbersPerSequenceId: Function;
            };
            statsProvider: {
              getInitialESSData: Function;
              addEventsToESSData: Function;
              addLossStatsData: Function;
              addDroppedEventsCountersData: Function;
              addDroppedEventsCounters: Function;
              provideEventSenderStats: Function;
            };
            initSendingEvents: Function;
            initializeContexts: Function;
            buildEvent: Function;
            getSpecificContext: Function;
            setupInstallationId: Function;
            getStorageId: Function;
            onBeforeDisconnect: Function;
            lastFlush: Function;
            sendEvents: Function;
            sendESS2NAWithOptimization: Function;
            commitAndUploadESStats: Function;
            onSuccessfullySentESStats: Function;
            sendToGabito: Function;
            getEvents: Function;
            storeEvent: Function;
            validateEventData: Function;
            send: Function;
            hasContext: Function;
            destroy: Function;
            getStorageType: Function;
            isUsingESS2NAOptimization: Function;
            getVersion: Function;
            finalFlush: Function;
            createEvent: Function;
            on: Function;
            addListener: Function;
            addListeners: Function;
            once: Function;
            removeListener: Function;
            removeListeners: Function;
            removeAllListeners: Function;
            emit: Function;
            emitSync: Function;
            emitEvent: Function;
            emitEventSync: Function;
            emitAndWait: Function;
            emitEventAndWait: Function;
            proxyEmit: Function;
            proxyEmitSync: Function;
            proxyEmitAll: Function;
            proxyEmitAllSync: Function;
            onAddListener: Function;
            onRemoveListener: Function;
          };
          flowIdProvider: any;
          pageInfoProvider: {
            storageManager: {
              storageAdapter: {
                items: {
                  get: Function;
                  set: Function;
                  has: Function;
                  delete: Function;
                  clear: Function;
                };
                setItem: Function;
                getItem: Function;
                removeItem: Function;
                clear: Function;
              };
              getItem: Function;
              setItem: Function;
              removeItem: Function;
              clear: Function;
              getStorageType: Function;
            };
            getPageInfo: Function;
            getPageId: Function;
            getPageInstanceId: Function;
            getPageUri: Function;
            getNavigationalRoot: Function;
            setPageInfo: Function;
          };
          authenticationProvider: {
            isAuthenticated: Function;
          };
          disableAutoBackgroundMonitoring: boolean;
          currentWindowState: {
            focused: boolean;
            visible: boolean;
          };
          storageManager: {
            storageAdapter: {
              items: {
                get: Function;
                set: Function;
                has: Function;
                delete: Function;
                clear: Function;
              };
              setItem: Function;
              getItem: Function;
              removeItem: Function;
              clear: Function;
            };
            getItem: Function;
            setItem: Function;
            removeItem: Function;
            clear: Function;
            getStorageType: Function;
          };
          getCurrentPageId: Function;
          getCurrentPageInstanceId: Function;
          getCurrentEntityUri: Function;
          getCurrentNavigationalRoot: Function;
          getNavigationStatus: Function;
          setNavigationStatus: Function;
          getPendingNavigationalRoot: Function;
          setPendingNavigationalRoot: Function;
          getPendingInteractionId: Function;
          setPendingInteractionId: Function;
          getPendingNavigationReason: Function;
          setPendingNavigationReason: Function;
          resetNavStartInfo: Function;
          populateNavigationReason: Function;
          generatePageInstanceId: Function;
          setCurrent: Function;
          isForeground: Function;
          handleFocusChange: Function;
          handleVisibilityChange: Function;
          handleFocusStateChange: Function;
          startNavigation: Function;
          completeNavigation: Function;
          logClientLostFocus: Function;
          logClientGainedFocus: Function;
          addEventListeners: Function;
          removeEventListeners: Function;
          logClientStarted: Function;
        };
        registerEventListeners: Function;
        unregisterEventListeners: Function;
        logInteraction: Function;
        logImpression: Function;
        logNavigationStart: Function;
        logNavigationEnd: Function;
        logNavigation: Function;
        logClientStarted: Function;
        logClientLostFocus: Function;
        logClientGainedFocus: Function;
        getPageInstanceId: Function;
      };
      getEvents: Function;
      logInteraction: Function;
      logImpression: Function;
      logNavigation: Function;
      logClientStarted: Function;
      getInteractionId: Function;
    };
    CollectionPlatformAPI: {
      cacheBySet: {
        artist: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        artistban: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        author: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        ban: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        collection: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        enhanced: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        ignoreinrecs: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        listenlater: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        show: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        ylpin: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        prerelease: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        tags: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        markedasfinished: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
      };
      events: {
        emitUpdateItems: Function;
        onBatchChanged: Function;
        createEvent: Function;
        addListener: Function;
        removeListener: Function;
        onAddListener: Function;
        onRemoveListener: Function;
        emit: Function;
        emitSync: Function;
      };
      getEvents: Function;
      get: Function;
      subscribe: Function;
      add: Function;
      remove: Function;
      contains: Function;
      containsSync: Function;
      subscribeContains: Function;
    };
    EqualizerAPI: {
      localStorageAPI: {
        items: any;
        max_retries: number;
        auto_cleanup: boolean;
        namespace: string;
        createNamespacedKey: Function;
        parseLocalStorageValue: Function;
        listenToStorageEvents: Function;
        getEvents: Function;
        getItem: Function;
        setItem: Function;
        setItemInternal: Function;
        toggleItemsTypeAndCleanup: Function;
        clearItem: Function;
      };
      filters: any;
      prefs: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        get: Function;
        sub: Function;
        getAll: Function;
        subAll: Function;
        set: Function;
        create: Function;
      };
      subscribeToEnabledState: Function;
      setEnabledState: Function;
      setFilterGain: Function;
      getFilters: Function;
      isSupported: Function;
      setPreset: Function;
      getPreset: Function;
      subscribeToPresetChange: Function;
    };
    BuddyFeedAPI: {
      presenceView: {
        builder: {
          pendingRequests: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          resetPendingRequests: Function;
          build: Function;
          accessToken: any;
          globalRequestHeaders: any;
          market: any;
          locale: any;
        };
        getBuddyActivity: Function;
        getBuddyFeed: Function;
        getBuddyFeedWithSubscribing: Function;
      };
      presence2: {
        pubsub: {
          onConnectionId: Function;
          getConnectionId: Function;
          cancelSubscription: Function;
          createSubscription: Function;
          refreshSubscription: Function;
          subscribe: Function;
          getSubscriptions: Function;
          getMessages: Function;
          getEvents: Function;
        };
        builder: {
          pendingRequests: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          resetPendingRequests: Function;
          build: Function;
          accessToken: any;
          globalRequestHeaders: any;
          market: any;
          locale: any;
        };
        subscribeToBuddyActivity: Function;
        unsubscribeFromBuddiesActivity: Function;
      };
      batchAPI: {
        pubsub: {
          onConnectionId: Function;
          getConnectionId: Function;
          cancelSubscription: Function;
          createSubscription: Function;
          refreshSubscription: Function;
          subscribe: Function;
          getSubscriptions: Function;
          getMessages: Function;
          getEvents: Function;
        };
        presenceView: {
          builder: {
            pendingRequests: {
              has: Function;
              add: Function;
              delete: Function;
              clear: Function;
              union: Function;
              intersection: Function;
              difference: Function;
              symmetricDifference: Function;
              isSubsetOf: Function;
              isSupersetOf: Function;
              isDisjointFrom: Function;
            };
            resetPendingRequests: Function;
            build: Function;
            accessToken: any;
            globalRequestHeaders: any;
            market: any;
            locale: any;
          };
          getBuddyActivity: Function;
          getBuddyFeed: Function;
          getBuddyFeedWithSubscribing: Function;
        };
        presence2: {
          pubsub: {
            onConnectionId: Function;
            getConnectionId: Function;
            cancelSubscription: Function;
            createSubscription: Function;
            refreshSubscription: Function;
            subscribe: Function;
            getSubscriptions: Function;
            getMessages: Function;
            getEvents: Function;
          };
          builder: {
            pendingRequests: {
              has: Function;
              add: Function;
              delete: Function;
              clear: Function;
              union: Function;
              intersection: Function;
              difference: Function;
              symmetricDifference: Function;
              isSubsetOf: Function;
              isSupersetOf: Function;
              isDisjointFrom: Function;
            };
            resetPendingRequests: Function;
            build: Function;
            accessToken: any;
            globalRequestHeaders: any;
            market: any;
            locale: any;
          };
          subscribeToBuddyActivity: Function;
          unsubscribeFromBuddiesActivity: Function;
        };
        subscription: {
          has: Function;
          add: Function;
          delete: Function;
          clear: Function;
          union: Function;
          intersection: Function;
          difference: Function;
          symmetricDifference: Function;
          isSubsetOf: Function;
          isSupersetOf: Function;
          isDisjointFrom: Function;
        };
        subscribe: Function;
        unsubscribe: Function;
      };
      getCapabilities: Function;
      subscribeToBuddyActivity: Function;
      fetchFriendActivity: Function;
      fetchFriendActivityByUsername: Function;
      fetchFriendActivityWithSubscriptions: Function;
    };
    SettingsAPI: {
      language: {
        value: any;
        subs: {
          has: Function;
          add: Function;
          delete: Function;
          clear: Function;
          union: Function;
          intersection: Function;
          difference: Function;
          symmetricDifference: Function;
          isSubsetOf: Function;
          isSupersetOf: Function;
          isDisjointFrom: Function;
        };
        subscription: any;
        prefsApi: {
          transport: {
            callSingle: Function;
            callStream: Function;
            call: Function;
          };
          options: any;
          get: Function;
          sub: Function;
          getAll: Function;
          subAll: Function;
          set: Function;
          create: Function;
        };
        identifier: string;
        deserializeValue: Function;
        getValue: Function;
        subValue: Function;
        serializeValue: Function;
        setValue: Function;
        key: string;
      };
      quality: {
        playbackService: {
          transport: {
            callSingle: Function;
            callStream: Function;
            call: Function;
          };
          options: any;
          getVolume: Function;
          getRawVolume: Function;
          subVolume: Function;
          subRawVolume: Function;
          setVolume: Function;
          setRawVolume: Function;
          raiseVolume: Function;
          lowerVolume: Function;
          getPlaybackInfo: Function;
          subPlaybackInfo: Function;
          getFormats: Function;
          subPosition: Function;
          getFiles: Function;
          duck: Function;
          subBufferUnderrun: Function;
        };
        maxSupportedQuality: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          identifier: string;
          deserialize: Function;
          getValue: Function;
          subValue: Function;
          key: string;
          clampAudioQuality: Function;
        };
        streamingQuality: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
          maxSupportedQuality: {
            value: any;
            subs: {
              has: Function;
              add: Function;
              delete: Function;
              clear: Function;
              union: Function;
              intersection: Function;
              difference: Function;
              symmetricDifference: Function;
              isSubsetOf: Function;
              isSupersetOf: Function;
              isDisjointFrom: Function;
            };
            subscription: any;
            productStateApi: {
              productStateApi: {
                transport: {
                  callSingle: Function;
                  callStream: Function;
                  call: Function;
                };
                options: any;
                getValues: Function;
                subValues: Function;
                putValues: Function;
                putValuesSync: Function;
                putOverridesValues: Function;
                delOverridesValues: Function;
              };
              cache: {
                isExpired: Function;
                getExpiry: Function;
                has: Function;
                peek: Function;
                get: Function;
                set: Function;
                create: Function;
                delete: Function;
                clear: Function;
                cleanup: Function;
              };
              mapKeys: Function;
              getValues: Function;
              getCachedValues: Function;
              subValues: Function;
              setValues: Function;
            };
            identifier: string;
            deserialize: Function;
            getValue: Function;
            subValue: Function;
            key: string;
            clampAudioQuality: Function;
          };
        };
        downloadAudioQuality: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
          maxSupportedQuality: {
            value: any;
            subs: {
              has: Function;
              add: Function;
              delete: Function;
              clear: Function;
              union: Function;
              intersection: Function;
              difference: Function;
              symmetricDifference: Function;
              isSubsetOf: Function;
              isSupersetOf: Function;
              isDisjointFrom: Function;
            };
            subscription: any;
            productStateApi: {
              productStateApi: {
                transport: {
                  callSingle: Function;
                  callStream: Function;
                  call: Function;
                };
                options: any;
                getValues: Function;
                subValues: Function;
                putValues: Function;
                putValuesSync: Function;
                putOverridesValues: Function;
                delOverridesValues: Function;
              };
              cache: {
                isExpired: Function;
                getExpiry: Function;
                has: Function;
                peek: Function;
                get: Function;
                set: Function;
                create: Function;
                delete: Function;
                clear: Function;
                cleanup: Function;
              };
              mapKeys: Function;
              getValues: Function;
              getCachedValues: Function;
              subValues: Function;
              setValues: Function;
            };
            identifier: string;
            deserialize: Function;
            getValue: Function;
            subValue: Function;
            key: string;
            clampAudioQuality: Function;
          };
        };
        normalizeVolume: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
        autoAdjustQuality: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
        volumeLevel: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
        remoteQuality: {
          callbacks: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          stateSubscription: any;
          key: string;
          connectService: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            state: Function;
            startDiscovery: Function;
            forceDiscover: Function;
            performDiscovery: Function;
            pickerOpened: Function;
            refreshCluster: Function;
            wakeSleepingClusterDevices: Function;
            installSpotify: Function;
            logout: Function;
            transfer: Function;
            sendCommand: Function;
            cancelTransfer: Function;
            pull: Function;
            setDebugLevel: Function;
            getDebugLevel: Function;
            becomeInactive: Function;
            rename: Function;
            setPreferredZeroconf: Function;
            notifyAudioRouteChanged: Function;
            getDeviceSettings: Function;
            setDeviceStreamQuality: Function;
          };
          getActiveDeviceId: Function;
          getValue: Function;
          subValue: Function;
          setValue: Function;
        };
        parrot: {
          key: string;
          getValue: Function;
          setValue: Function;
          subValue: Function;
        };
        getFormats: Function;
      };
      social: {
        autoPublishPlaylist: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          identifier: string;
          deserialize: Function;
          getValue: Function;
          subValue: Function;
          serialize: Function;
          setValue: Function;
          key: string;
        };
        shareListeningActivity: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          identifier: string;
          deserialize: Function;
          getValue: Function;
          subValue: Function;
          serialize: Function;
          setValue: Function;
          key: string;
        };
        privateSession: {
          key: string;
          value: boolean;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          unsubscribeFromPrivateSession: any;
          privateSessionAPI: {
            subscribeToPrivateSession: Function;
            setPrivateSession: Function;
            getCapabilities: Function;
          };
          getValue: Function;
          setValue: Function;
          subValue: Function;
        };
        showMyTopArtists: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          identifier: string;
          deserialize: Function;
          getValue: Function;
          subValue: Function;
          serialize: Function;
          setValue: Function;
          key: string;
        };
      };
      autoPlay: {
        value: any;
        subs: {
          has: Function;
          add: Function;
          delete: Function;
          clear: Function;
          union: Function;
          intersection: Function;
          difference: Function;
          symmetricDifference: Function;
          isSubsetOf: Function;
          isSupersetOf: Function;
          isDisjointFrom: Function;
        };
        subscription: any;
        productStateApi: {
          productStateApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            getValues: Function;
            subValues: Function;
            putValues: Function;
            putValuesSync: Function;
            putOverridesValues: Function;
            delOverridesValues: Function;
          };
          cache: {
            isExpired: Function;
            getExpiry: Function;
            has: Function;
            peek: Function;
            get: Function;
            set: Function;
            create: Function;
            delete: Function;
            clear: Function;
            cleanup: Function;
          };
          mapKeys: Function;
          getValues: Function;
          getCachedValues: Function;
          subValues: Function;
          setValues: Function;
        };
        identifier: string;
        deserialize: Function;
        getValue: Function;
        subValue: Function;
        serialize: Function;
        setValue: Function;
        key: string;
        autoPlaySupported: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
        };
      };
      viewportZoom: {
        value: number;
        subs: {
          has: Function;
          add: Function;
          delete: Function;
          clear: Function;
          union: Function;
          intersection: Function;
          difference: Function;
          symmetricDifference: Function;
          isSubsetOf: Function;
          isSupersetOf: Function;
          isDisjointFrom: Function;
        };
        subscription: {
          cancel: Function;
        };
        prefsApi: {
          transport: {
            callSingle: Function;
            callStream: Function;
            call: Function;
          };
          options: any;
          get: Function;
          sub: Function;
          getAll: Function;
          subAll: Function;
          set: Function;
          create: Function;
        };
        identifier: string;
        deserializeValue: Function;
        getValue: Function;
        subValue: Function;
        key: string;
        zoomApi: {
          zoomEsperanto: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            getZoomLevel: Function;
            setZoomLevel: Function;
            zoomIn: Function;
            zoomOut: Function;
          };
          getZoomLevel: Function;
          setZoomLevel: Function;
          zoomIn: Function;
          zoomOut: Function;
          getCapabilities: Function;
        };
        setValue: Function;
      };
      display: {
        nativeNotificationOnPlayerTransition: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
        nativeOverlayOnMediaKeys: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
        newReleasesAnnoucements: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
      };
      contentPreferences: {
        allowExplicitContent: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          identifier: string;
          deserialize: Function;
          getValue: Function;
          subValue: Function;
          serialize: Function;
          setValue: Function;
          key: string;
        };
        explicitContentForceDisallowed: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          identifier: string;
          deserialize: Function;
          getValue: Function;
          subValue: Function;
          key: string;
        };
      };
      employee: {
        isEmployee: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          identifier: string;
          deserialize: Function;
          getValue: Function;
          subValue: Function;
          key: string;
        };
        developerMode: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
        showChromeToolbar: {
          value: any;
          subs: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          subscription: any;
          prefsApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            get: Function;
            sub: Function;
            getAll: Function;
            subAll: Function;
            set: Function;
            create: Function;
          };
          identifier: string;
          deserializeValue: Function;
          getValue: Function;
          subValue: Function;
          serializeValue: Function;
          setValue: Function;
          key: string;
        };
      };
    };
    RequestBuilder: {
      pendingRequests: {
        has: Function;
        add: Function;
        delete: Function;
        clear: Function;
        union: Function;
        intersection: Function;
        difference: Function;
        symmetricDifference: Function;
        isSubsetOf: Function;
        isSupersetOf: Function;
        isDisjointFrom: Function;
      };
      resetPendingRequests: Function;
      build: Function;
      accessToken: any;
      globalRequestHeaders: any;
      market: any;
      locale: any;
    };
    AudioOutputDevicesAPI: {
      devices: any;
      getDefaultDevice: Function;
      getDevices: Function;
      getEvents: Function;
    };
    PlaybackFiltersAPI: {
      getFilterState: Function;
      getDevices: Function;
      getFiltersEvents: Function;
      setCurrentDevice: Function;
      getSavedDevices: Function;
      removeCurrentDevice: Function;
      isNormalizationOverriden: Function;
      disableNormalizationOverride: Function;
      isAvailable: Function;
    };
    UrlDispenserServiceClient: {
      getShortUrl: Function;
    };
    ExternalAccessoryAPI: {
      lookup: Function;
      sendLookupRequest: Function;
    };
    UserAPI: {
      getUser: Function;
    };
    ProductStateAPI: {
      productStateApi: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        getValues: Function;
        subValues: Function;
        putValues: Function;
        putValuesSync: Function;
        putOverridesValues: Function;
        delOverridesValues: Function;
      };
      cache: {
        isExpired: Function;
        getExpiry: Function;
        has: Function;
        peek: Function;
        get: Function;
        set: Function;
        create: Function;
        delete: Function;
        clear: Function;
        cleanup: Function;
      };
      mapKeys: Function;
      getValues: Function;
      getCachedValues: Function;
      subValues: Function;
      setValues: Function;
    };
    AuthorizationAPI: {
      onTokenChanged: Function;
      onAuthenticationFailed: Function;
      getCapabilities: Function;
      getEvents: Function;
      getState: Function;
      tryAuthorize: Function;
      getSessionTransferURL: Function;
    };
    LocalStorageAPI: {
      items: any;
      max_retries: number;
      auto_cleanup: boolean;
      namespace: string;
      createNamespacedKey: Function;
      parseLocalStorageValue: Function;
      listenToStorageEvents: Function;
      getEvents: Function;
      getItem: Function;
      setItem: Function;
      setItemInternal: Function;
      toggleItemsTypeAndCleanup: Function;
      clearItem: Function;
    };
    RemoteConfigDebugAPI: {
      getProperties: Function;
      setOverride: Function;
      clearOverrides: Function;
      update: Function;
      getEvents: Function;
      getLocalConfiguration: Function;
    };
    ContextualShuffleAPI: {
      getContextualShuffleMode: Function;
      setContextualShuffleMode: Function;
      getEvents: Function;
    };
    IndexedDbAPI: {
      name: string;
      version: number;
      getEvents: Function;
      openDb: Function;
      getItem: Function;
      setItem: Function;
      deleteItem: Function;
    };
    UpdateAPI: {
      getVersionInfo: Function;
      subscribe: Function;
      prepareUpdate: Function;
      applyUpdate: Function;
    };
    NativeAPI: {
      setWindowButtonsVisibility: Function;
    };
    ZoomAPI: {
      zoomEsperanto: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        getZoomLevel: Function;
        setZoomLevel: Function;
        zoomIn: Function;
        zoomOut: Function;
      };
      getZoomLevel: Function;
      setZoomLevel: Function;
      zoomIn: Function;
      zoomOut: Function;
      getCapabilities: Function;
    };
    PubSubAPI: {
      onConnectionId: Function;
      getConnectionId: Function;
      cancelSubscription: Function;
      createSubscription: Function;
      refreshSubscription: Function;
      subscribe: Function;
      getSubscriptions: Function;
      getMessages: Function;
      getEvents: Function;
    };
    PlaylistResyncAPI: {
      lastSync: {
        get: Function;
        set: Function;
        has: Function;
        delete: Function;
        clear: Function;
      };
      resync: Function;
      maybeResync: Function;
    };
    ConnectAPI: {
      state: {
        connectionStatus: string;
        activeDevice: {
          id: string;
          connectStateId: string;
          name: string;
          type: string;
          isGroup: boolean;
          isLocal: boolean;
          isActive: boolean;
          isConnecting: boolean;
          isDisabled: boolean;
          disabledReason: any;
          volume: number;
          losslessSupport: {
            fullySupported: boolean;
            deviceSupported: boolean;
            userEligible: boolean;
          };
          brandDisplayName: string;
          modelDisplayName: string;
          license: string;
          currentState: string;
          isLocalNetwork: boolean;
          isZeroconf: boolean;
          isWebApp: boolean;
          supportsLogout: boolean;
          incarnation: {
            preferred: any;
            available: any;
          };
          supportsDJNarration: boolean;
          supportedMediaTypes: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
        };
        connectingDevice: any;
        devices: any;
      };
      checkDeviceId: Function;
      mapIncarnationToLoginType: Function;
      connectServiceClient: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        state: Function;
        startDiscovery: Function;
        forceDiscover: Function;
        performDiscovery: Function;
        pickerOpened: Function;
        refreshCluster: Function;
        wakeSleepingClusterDevices: Function;
        installSpotify: Function;
        logout: Function;
        transfer: Function;
        sendCommand: Function;
        cancelTransfer: Function;
        pull: Function;
        setDebugLevel: Function;
        getDebugLevel: Function;
        becomeInactive: Function;
        rename: Function;
        setPreferredZeroconf: Function;
        notifyAudioRouteChanged: Function;
        getDeviceSettings: Function;
        setDeviceStreamQuality: Function;
      };
      events: {
        connectServiceClient: {
          transport: {
            callSingle: Function;
            callStream: Function;
            call: Function;
          };
          options: any;
          state: Function;
          startDiscovery: Function;
          forceDiscover: Function;
          performDiscovery: Function;
          pickerOpened: Function;
          refreshCluster: Function;
          wakeSleepingClusterDevices: Function;
          installSpotify: Function;
          logout: Function;
          transfer: Function;
          sendCommand: Function;
          cancelTransfer: Function;
          pull: Function;
          setDebugLevel: Function;
          getDebugLevel: Function;
          becomeInactive: Function;
          rename: Function;
          setPreferredZeroconf: Function;
          notifyAudioRouteChanged: Function;
          getDeviceSettings: Function;
          setDeviceStreamQuality: Function;
        };
        createEvent: Function;
        addListener: Function;
        removeListener: Function;
        onAddListener: Function;
        onRemoveListener: Function;
        emit: Function;
        emitSync: Function;
      };
      getCapabilities: Function;
      getState: Function;
      getEvents: Function;
      initiateLocalDiscovery: Function;
      updateListOfDevices: Function;
      createLoggingParams: Function;
      pullToLocal: Function;
      transferToRemote: Function;
      transferPlayback: Function;
      logout: Function;
      setPreferredIncarnation: Function;
    };
    ConnectDiscoveryAPI: {
      connectServiceClient: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        state: Function;
        startDiscovery: Function;
        forceDiscover: Function;
        performDiscovery: Function;
        pickerOpened: Function;
        refreshCluster: Function;
        wakeSleepingClusterDevices: Function;
        installSpotify: Function;
        logout: Function;
        transfer: Function;
        sendCommand: Function;
        cancelTransfer: Function;
        pull: Function;
        setDebugLevel: Function;
        getDebugLevel: Function;
        becomeInactive: Function;
        rename: Function;
        setPreferredZeroconf: Function;
        notifyAudioRouteChanged: Function;
        getDeviceSettings: Function;
        setDeviceStreamQuality: Function;
      };
      startActiveDiscovery: Function;
    };
    ConnectTransferAPI: {
      connectServiceClient: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        state: Function;
        startDiscovery: Function;
        forceDiscover: Function;
        performDiscovery: Function;
        pickerOpened: Function;
        refreshCluster: Function;
        wakeSleepingClusterDevices: Function;
        installSpotify: Function;
        logout: Function;
        transfer: Function;
        sendCommand: Function;
        cancelTransfer: Function;
        pull: Function;
        setDebugLevel: Function;
        getDebugLevel: Function;
        becomeInactive: Function;
        rename: Function;
        setPreferredZeroconf: Function;
        notifyAudioRouteChanged: Function;
        getDeviceSettings: Function;
        setDeviceStreamQuality: Function;
      };
      pullToLocalDevice: Function;
      transferPlayback: Function;
      transferToRemote: Function;
      createLoggingParams: Function;
    };
    ConnectDeviceManagementAPI: {
      checkDeviceId: Function;
      mapIncarnationToLoginType: Function;
      connectServiceClient: {
        transport: {
          callSingle: Function;
          callStream: Function;
          call: Function;
        };
        options: any;
        state: Function;
        startDiscovery: Function;
        forceDiscover: Function;
        performDiscovery: Function;
        pickerOpened: Function;
        refreshCluster: Function;
        wakeSleepingClusterDevices: Function;
        installSpotify: Function;
        logout: Function;
        transfer: Function;
        sendCommand: Function;
        cancelTransfer: Function;
        pull: Function;
        setDebugLevel: Function;
        getDebugLevel: Function;
        becomeInactive: Function;
        rename: Function;
        setPreferredZeroconf: Function;
        notifyAudioRouteChanged: Function;
        getDeviceSettings: Function;
        setDeviceStreamQuality: Function;
      };
      logout: Function;
      setPreferredIncarnation: Function;
    };
    ConnectRestrictionsAPI: {
      localStorageAPI: {
        items: any;
        max_retries: number;
        auto_cleanup: boolean;
        namespace: string;
        createNamespacedKey: Function;
        parseLocalStorageValue: Function;
        listenToStorageEvents: Function;
        getEvents: Function;
        getItem: Function;
        setItem: Function;
        setItemInternal: Function;
        toggleItemsTypeAndCleanup: Function;
        clearItem: Function;
      };
      restrict: Function;
      getRestrictionState: Function;
    };
    ConnectRestrictionStateAPI: {
      localStorageAPI: {
        items: any;
        max_retries: number;
        auto_cleanup: boolean;
        namespace: string;
        createNamespacedKey: Function;
        parseLocalStorageValue: Function;
        listenToStorageEvents: Function;
        getEvents: Function;
        getItem: Function;
        setItem: Function;
        setItemInternal: Function;
        toggleItemsTypeAndCleanup: Function;
        clearItem: Function;
      };
      restrict: Function;
      getRestrictionState: Function;
    };
    ConnectDevicesAPI: {
      state: {
        connectionStatus: string;
        activeDevice: {
          id: string;
          connectStateId: string;
          name: string;
          type: string;
          isGroup: boolean;
          isLocal: boolean;
          isActive: boolean;
          isConnecting: boolean;
          isDisabled: boolean;
          disabledReason: any;
          volume: number;
          losslessSupport: {
            fullySupported: boolean;
            deviceSupported: boolean;
            userEligible: boolean;
          };
          brandDisplayName: string;
          modelDisplayName: string;
          license: string;
          currentState: string;
          isLocalNetwork: boolean;
          isZeroconf: boolean;
          isWebApp: boolean;
          supportsLogout: boolean;
          incarnation: {
            preferred: any;
            available: any;
          };
          supportsDJNarration: boolean;
          supportedMediaTypes: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
        };
        connectingDevice: any;
        devices: any;
      };
      events: {
        connectServiceClient: {
          transport: {
            callSingle: Function;
            callStream: Function;
            call: Function;
          };
          options: any;
          state: Function;
          startDiscovery: Function;
          forceDiscover: Function;
          performDiscovery: Function;
          pickerOpened: Function;
          refreshCluster: Function;
          wakeSleepingClusterDevices: Function;
          installSpotify: Function;
          logout: Function;
          transfer: Function;
          sendCommand: Function;
          cancelTransfer: Function;
          pull: Function;
          setDebugLevel: Function;
          getDebugLevel: Function;
          becomeInactive: Function;
          rename: Function;
          setPreferredZeroconf: Function;
          notifyAudioRouteChanged: Function;
          getDeviceSettings: Function;
          setDeviceStreamQuality: Function;
        };
        createEvent: Function;
        addListener: Function;
        removeListener: Function;
        onAddListener: Function;
        onRemoveListener: Function;
        emit: Function;
        emitSync: Function;
      };
      connectRestrictor: {
        connectRestrictions: {
          localStorageAPI: {
            items: any;
            max_retries: number;
            auto_cleanup: boolean;
            namespace: string;
            createNamespacedKey: Function;
            parseLocalStorageValue: Function;
            listenToStorageEvents: Function;
            getEvents: Function;
            getItem: Function;
            setItem: Function;
            setItemInternal: Function;
            toggleItemsTypeAndCleanup: Function;
            clearItem: Function;
          };
          restrict: Function;
          getRestrictionState: Function;
        };
        updateRestrictedListOfDevices: Function;
      };
      getConnectState: Function;
      getActiveDevice: Function;
      getDevices: Function;
      getEvents: Function;
    };
    PlayerAPI: {
      forcedShuffle: boolean;
      referrer: string;
      setDefaultFeatureVersion: Function;
      getCapabilities: Function;
      getEvents: Function;
      getState: Function;
      getReferrer: Function;
      setReferrer: Function;
      play: Function;
      pause: Function;
      resume: Function;
      skipToNext: Function;
      skipTo: Function;
      skipToPrevious: Function;
      seekTo: Function;
      seekBy: Function;
      seekForward: Function;
      seekBackward: Function;
      setShuffle: Function;
      setRepeat: Function;
      setSpeed: Function;
      canPlayEncryptedContent: Function;
      refreshCurrentContext: Function;
      updateContext: Function;
      sendSignal: Function;
      canSendSignal: Function;
      addToQueue: Function;
      removeFromQueue: Function;
      clearQueue: Function;
      reorderQueue: Function;
      insertIntoQueue: Function;
      getQueue: Function;
      getForcedShuffle: Function;
      setForcedShuffle: Function;
      playAsNextInQueue: Function;
    };
    OvertureCoordinatorAPI: {
      instances: {
        delete: Function;
        get: Function;
        set: Function;
        has: Function;
      };
      currentActiveInstance: any;
      currentPlayerVolume: number;
      playerAPI: {
        forcedShuffle: boolean;
        referrer: string;
        setDefaultFeatureVersion: Function;
        getCapabilities: Function;
        getEvents: Function;
        getState: Function;
        getReferrer: Function;
        setReferrer: Function;
        play: Function;
        pause: Function;
        resume: Function;
        skipToNext: Function;
        skipTo: Function;
        skipToPrevious: Function;
        seekTo: Function;
        seekBy: Function;
        seekForward: Function;
        seekBackward: Function;
        setShuffle: Function;
        setRepeat: Function;
        setSpeed: Function;
        canPlayEncryptedContent: Function;
        refreshCurrentContext: Function;
        updateContext: Function;
        sendSignal: Function;
        canSendSignal: Function;
        addToQueue: Function;
        removeFromQueue: Function;
        clearQueue: Function;
        reorderQueue: Function;
        insertIntoQueue: Function;
        getQueue: Function;
        getForcedShuffle: Function;
        setForcedShuffle: Function;
        playAsNextInQueue: Function;
      };
      playbackAPI: {
        getCapabilities: Function;
        getEvents: Function;
        getVolume: Function;
        setVolume: Function;
        raiseVolume: Function;
        lowerVolume: Function;
        getPlaybackInfo: Function;
        getFiles: Function;
        getVolumeInternal: Function;
        emitVolume: Function;
      };
      createOvertureInstance: Function;
      deleteOvertureInstance: Function;
      setupPlayerListeners: Function;
      inactivateInstance: Function;
      setupOvertureListeners: Function;
    };
    SmartShuffleEligibilityAPI: {
      getEligibility: Function;
    };
    ShuffleAPI: {
      isSmartShuffleEnabled: boolean;
      isNewShuffleModeOrderEnabled: boolean;
      getEvents: Function;
      getAvailableShuffleModes: Function;
      getShuffle: Function;
      setShuffle: Function;
    };
    PlaybackAPI: {
      getCapabilities: Function;
      getEvents: Function;
      getVolume: Function;
      setVolume: Function;
      raiseVolume: Function;
      lowerVolume: Function;
      getPlaybackInfo: Function;
      getFiles: Function;
      getVolumeInternal: Function;
      emitVolume: Function;
    };
    OfflineAPI: {
      getCapabilities: Function;
      getEvents: Function;
      getDownloads: Function;
      getAvailabilitySync: Function;
      getContextForDevices: Function;
      addDownload: Function;
      removeDownload: Function;
      removeAllDownloads: Function;
      removeCache: Function;
      getStatistics: Function;
    };
    LibraryAPI: {
      getCapabilities: Function;
      getTracks: Function;
      getTracksFilterTags: Function;
      getEvents: Function;
      add: Function;
      remove: Function;
      contains: Function;
      containsSync: Function;
      markAsPlayed: Function;
      markAsUnPlayed: Function;
      pin: Function;
      unpin: Function;
      getContents: Function;
      getContentsPrimaryFilterId: Function;
      getFilterLabel: Function;
      getSortOrderLabel: Function;
      getStaticallyKnownFilters: Function;
      getRecentsSortOrderId: Function;
      getCustomSortOrderId: Function;
    };
    RootlistAPI: {
      getCapabilities: Function;
      getMetadata: Function;
      getContents: Function;
      getEvents: Function;
      onUpdateItems: Function;
      applyModification: Function;
      renameFolder: Function;
      createFolder: Function;
      moveFolder: Function;
      removeFolder: Function;
      createPlaylist: Function;
      add: Function;
      move: Function;
      remove: Function;
      contains: Function;
      containsSync: Function;
      getPublishedState: Function;
      setPublishedState: Function;
    };
    PlaylistAPI: {
      getCapabilities: Function;
      getEvents: Function;
      getPlaylist: Function;
      getContents: Function;
      getMetadata: Function;
      resync: Function;
      add: Function;
      move: Function;
      remove: Function;
      uploadImage: Function;
      setAttributes: Function;
      clearAttributes: Function;
      updateDetails: Function;
      requestLenses: Function;
      sendSignal: Function;
      resolvePlaylistFormatURI: Function;
      getRecommendedTracks: Function;
      getRecommendedBookUris: Function;
    };
    PlaylistPermissionsAPI: {
      getCapabilities: Function;
      getEvents: Function;
      getPermissionGrant: Function;
      claimPermissions: Function;
      getMembers: Function;
      subscribeToMembers: Function;
      removeMember: Function;
      setMemberPermission: Function;
      setBasePermission: Function;
    };
    CurationAPI: {
      cache: {
        isExpired: Function;
        getExpiry: Function;
        has: Function;
        peek: Function;
        get: Function;
        set: Function;
        create: Function;
        delete: Function;
        clear: Function;
        cleanup: Function;
      };
      getDefaultCurationContextUri: Function;
      events: {
        cache: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        aggregator: {
          onUpdate: Function;
          scheduleUpdate: Function;
          getBatch: Function;
          subscribe: Function;
          unsubscribe: Function;
        };
        streamIsCuratedCancellable: {
          cancel: Function;
        };
        onCuratedBatchChanged: Function;
        emitUpdateCuratedItems: Function;
        emitOperationSync: Function;
        emitOperationComplete: Function;
        createEvent: Function;
        addListener: Function;
        removeListener: Function;
        onAddListener: Function;
        onRemoveListener: Function;
        emit: Function;
        emitSync: Function;
      };
      getCapabilities: Function;
      getEvents: Function;
      getCurationContexts: Function;
      getAvailableSortOrders: Function;
      curateItems: Function;
      curateDefault: Function;
      isCurated: Function;
      isCuratedSync: Function;
    };
    ShowAPI: {
      capabilities: {
        canSort: boolean;
        canFilter: boolean;
        canGetDefaultSort: boolean;
        canGetShowPlayedState: boolean;
        canMarkAsFinished: boolean;
      };
      isResumptionProgressEnabled: boolean;
      getMetadata: Function;
      getAccessInfo: Function;
      getBookContents: Function;
      getContents: Function;
      getEpisodeOrChapter: Function;
      checkoutBook: Function;
      getPlayerSort: Function;
      getPlayerFilter: Function;
      getEvents: Function;
      getShowPlayedState: Function;
      updateUserRating: Function;
      markShowPlayedLegacy: Function;
      invalidateShowMetadataCaches: Function;
    };
    AudiobookCappingAPI: {
      getCappingStatus: Function;
      getEvents: Function;
      onUpdateCapping: Function;
    };
    ReportAPI: {
      getReportURL: Function;
      isURIReportable: Function;
      canReportPlaylist: Function;
    };
    LocalFilesAPI: {
      getCapabilities: Function;
      getEvents: Function;
      getIsEnabled: Function;
      setIsEnabled: Function;
      subscribeIsEnabled: Function;
      browseForFolder: Function;
      getSources: Function;
      addFolder: Function;
      removeFolder: Function;
      mutateDefaultSource: Function;
      getTracks: Function;
    };
    PlayHistoryAPI: {
      getContents: Function;
      getEvents: Function;
      getCapabilities: Function;
    };
    ControlMessageAPI: {
      enableMenuItem: Function;
      disableMenuItem: Function;
      setTitlebarHeight: Function;
      enablePLEEndpoint: Function;
      setPLEPorts: Function;
      notifyUsableStateReached: Function;
      notifyReadyStateReached: Function;
      notifyViewLoaded: Function;
      getEvents: Function;
    };
    ClipboardAPI: {
      copy: Function;
      paste: Function;
    };
    FollowAPI: {
      getEvents: Function;
      isFollowing: Function;
      followUsers: Function;
      unfollowUsers: Function;
      executeOperation: Function;
    };
    PrivateSessionAPI: {
      subscribeToPrivateSession: Function;
      setPrivateSession: Function;
      getCapabilities: Function;
    };
    SegmentsAPI: {
      getCapabilities: Function;
      getSegments: Function;
      getArtists: Function;
    };
    RecentlyPlayedAPI: {
      getEvents: Function;
      getContexts: Function;
      startListening: Function;
    };
    ActionStoreAPI: {
      cleanActions: Function;
      triggerActions: Function;
      storeAction: Function;
    };
    UserCommentsAPI: {
      getTopComments: Function;
      getComments: Function;
      addComment: Function;
      deleteComment: Function;
    };
    VideoAPI: {
      initialize: Function;
      createPlayerConfiguration: Function;
      getAccessToken: Function;
      getProductState: Function;
      createCoreExtensionVideoCoordinator: Function;
      createVideoCoordinator: Function;
      createOfflineCoordinator: Function;
      onManifestLoaded: Function;
      onPictureInPictureChanged: Function;
      getPictureInPictureState: Function;
      setSubtitleLanguages: Function;
      getCapabilities: Function;
      getEvents: Function;
      getSubtitleLanguages: Function;
      getPreferredSubtitleLanguage: Function;
      setPreferredSubtitleLanguage: Function;
      reportVideoMode: Function;
      videoModeToSurface: Function;
      setMinimizeBitrate: Function;
      setFullscreen: Function;
      setPip: Function;
      setWindow: Function;
    };
    SocialConnectAPI: {
      socialConnectServiceClient: {
        onConnected: Function;
        fetchCurrentSession: Function;
        createSession: Function;
        leaveSession: Function;
        deleteSession: Function;
        joinSession: Function;
        getSessionInfo: Function;
        removeSessionMember: Function;
        kickAllParticipants: Function;
        setQueueOnlyMode: Function;
        setParticipantVolumeControl: Function;
        setBroadcastStatus: Function;
      };
      serviceEvents: {
        numUpdateListeners: number;
        numMessageListeners: number;
        subscribeToUpdates: Function;
        unsubscribeToUpdates: Function;
        onSessionUpdate: Function;
        subscribeToMessages: Function;
        unsubscribeToMessages: Function;
        onSessionMessage: Function;
        createEvent: Function;
        addListener: Function;
        removeListener: Function;
        onAddListener: Function;
        onRemoveListener: Function;
        emit: Function;
        emitSync: Function;
      };
      urlDispenserServiceClient: {
        getShortUrl: Function;
      };
      socialConnectProductState: {
        productStateApi: {
          productStateApi: {
            transport: {
              callSingle: Function;
              callStream: Function;
              call: Function;
            };
            options: any;
            getValues: Function;
            subValues: Function;
            putValues: Function;
            putValuesSync: Function;
            putOverridesValues: Function;
            delOverridesValues: Function;
          };
          cache: {
            isExpired: Function;
            getExpiry: Function;
            has: Function;
            peek: Function;
            get: Function;
            set: Function;
            create: Function;
            delete: Function;
            clear: Function;
            cleanup: Function;
          };
          mapKeys: Function;
          getValues: Function;
          getCachedValues: Function;
          subValues: Function;
          setValues: Function;
        };
        isJamFreeEnabled: boolean;
        isJamPremiumEnabled: boolean;
        listeners: {
          has: Function;
          add: Function;
          delete: Function;
          clear: Function;
          union: Function;
          intersection: Function;
          difference: Function;
          symmetricDifference: Function;
          isSubsetOf: Function;
          isSupersetOf: Function;
          isDisjointFrom: Function;
        };
        getJamExperience: Function;
        addListener: Function;
      };
      socialConnectConfig: string;
      waitForActiveOrLocalDeviceId: Function;
      socialConnectBroadcastingAPI: {
        getLocalNetSessionDevices: Function;
        handleBroadcastStatusUpdate: Function;
        handleWifiBroadcastUpdate: Function;
        setBroadcastStatus: Function;
        getEvents: Function;
      };
      currentSession: any;
      events: {
        createEvent: Function;
        addListener: Function;
        removeListener: Function;
        onAddListener: Function;
        onRemoveListener: Function;
        emit: Function;
        emitSync: Function;
      };
      shortLinkCaches: {
        shortLinkCache: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
        shortLinkQRCache: {
          isExpired: Function;
          getExpiry: Function;
          has: Function;
          peek: Function;
          get: Function;
          set: Function;
          create: Function;
          delete: Function;
          clear: Function;
          cleanup: Function;
        };
      };
      handleSessionUpdate: Function;
      handleSessionMessage: Function;
      isSessionNewer: Function;
      getEnabled: Function;
      getJamExperience: Function;
      addJamExperienceListener: Function;
      getCurrentSession: Function;
      cleanupSession: Function;
      emitSessionEnded: Function;
      maybeEmitLeaveOrJoin: Function;
      setCurrentSession: Function;
      getEvents: Function;
      handleSessionResponse: Function;
      fetchCurrentSession: Function;
      createSession: Function;
      leaveSession: Function;
      deleteSession: Function;
      joinSession: Function;
      getSessionInfo: Function;
      getJoinTokenFromConnectDeviceId: Function;
      removeSessionMember: Function;
      kickAllParticipants: Function;
      getShortInviteLink: Function;
      setQueueOnlyMode: Function;
      setParticipantVolumeControl: Function;
      getLocalNetSessionDevices: Function;
      setBroadcastStatus: Function;
      getBroadcastingEvents: Function;
    };
    JamDevicesAPI: {
      socialConnectAPI: {
        socialConnectServiceClient: {
          onConnected: Function;
          fetchCurrentSession: Function;
          createSession: Function;
          leaveSession: Function;
          deleteSession: Function;
          joinSession: Function;
          getSessionInfo: Function;
          removeSessionMember: Function;
          kickAllParticipants: Function;
          setQueueOnlyMode: Function;
          setParticipantVolumeControl: Function;
          setBroadcastStatus: Function;
        };
        serviceEvents: {
          numUpdateListeners: number;
          numMessageListeners: number;
          subscribeToUpdates: Function;
          unsubscribeToUpdates: Function;
          onSessionUpdate: Function;
          subscribeToMessages: Function;
          unsubscribeToMessages: Function;
          onSessionMessage: Function;
          createEvent: Function;
          addListener: Function;
          removeListener: Function;
          onAddListener: Function;
          onRemoveListener: Function;
          emit: Function;
          emitSync: Function;
        };
        urlDispenserServiceClient: {
          getShortUrl: Function;
        };
        socialConnectProductState: {
          productStateApi: {
            productStateApi: {
              transport: {
                callSingle: Function;
                callStream: Function;
                call: Function;
              };
              options: any;
              getValues: Function;
              subValues: Function;
              putValues: Function;
              putValuesSync: Function;
              putOverridesValues: Function;
              delOverridesValues: Function;
            };
            cache: {
              isExpired: Function;
              getExpiry: Function;
              has: Function;
              peek: Function;
              get: Function;
              set: Function;
              create: Function;
              delete: Function;
              clear: Function;
              cleanup: Function;
            };
            mapKeys: Function;
            getValues: Function;
            getCachedValues: Function;
            subValues: Function;
            setValues: Function;
          };
          isJamFreeEnabled: boolean;
          isJamPremiumEnabled: boolean;
          listeners: {
            has: Function;
            add: Function;
            delete: Function;
            clear: Function;
            union: Function;
            intersection: Function;
            difference: Function;
            symmetricDifference: Function;
            isSubsetOf: Function;
            isSupersetOf: Function;
            isDisjointFrom: Function;
          };
          getJamExperience: Function;
          addListener: Function;
        };
        socialConnectConfig: string;
        waitForActiveOrLocalDeviceId: Function;
        socialConnectBroadcastingAPI: {
          getLocalNetSessionDevices: Function;
          handleBroadcastStatusUpdate: Function;
          handleWifiBroadcastUpdate: Function;
          setBroadcastStatus: Function;
          getEvents: Function;
        };
        currentSession: any;
        events: {
          createEvent: Function;
          addListener: Function;
          removeListener: Function;
          onAddListener: Function;
          onRemoveListener: Function;
          emit: Function;
          emitSync: Function;
        };
        shortLinkCaches: {
          shortLinkCache: {
            isExpired: Function;
            getExpiry: Function;
            has: Function;
            peek: Function;
            get: Function;
            set: Function;
            create: Function;
            delete: Function;
            clear: Function;
            cleanup: Function;
          };
          shortLinkQRCache: {
            isExpired: Function;
            getExpiry: Function;
            has: Function;
            peek: Function;
            get: Function;
            set: Function;
            create: Function;
            delete: Function;
            clear: Function;
            cleanup: Function;
          };
        };
        handleSessionUpdate: Function;
        handleSessionMessage: Function;
        isSessionNewer: Function;
        getEnabled: Function;
        getJamExperience: Function;
        addJamExperienceListener: Function;
        getCurrentSession: Function;
        cleanupSession: Function;
        emitSessionEnded: Function;
        maybeEmitLeaveOrJoin: Function;
        setCurrentSession: Function;
        getEvents: Function;
        handleSessionResponse: Function;
        fetchCurrentSession: Function;
        createSession: Function;
        leaveSession: Function;
        deleteSession: Function;
        joinSession: Function;
        getSessionInfo: Function;
        getJoinTokenFromConnectDeviceId: Function;
        removeSessionMember: Function;
        kickAllParticipants: Function;
        getShortInviteLink: Function;
        setQueueOnlyMode: Function;
        setParticipantVolumeControl: Function;
        getLocalNetSessionDevices: Function;
        setBroadcastStatus: Function;
        getBroadcastingEvents: Function;
      };
      getJamDevices: Function;
      combineJamsWithEntities: Function;
      areTheSame: Function;
      removeJamIfWeAreOnItAlready: Function;
      removeMatchedJams: Function;
      createNearbyJamRowEntities: Function;
      mergeJamsWithEntities: Function;
      cleanupJams: Function;
    };
    LifecycleAPI: {
      restart: Function;
      shutdown: Function;
    };
    FeedbackAPI: {
      getEvents: Function;
      getCapabilities: Function;
      addContextTrackBan: Function;
      removeContextTrackBan: Function;
    };
    DesktopLogsAPI: {
      getLogFolder: Function;
      openFolder: Function;
    };
  }
}
